{"id":"0607361476ba","title":"网络攻防技术实验作业 | 工具配置与使用篇（上）","created":"2022-05-28T10:22:50.000Z","updated":"2022-05-28T10:22:50.000Z","raw":"<p>[迁移自博客园] | BUAA Web Attack and Defense 2022 Tool Configuration and Use</p>\n<span id=\"more\"></span>\n<h2 id=\"wireshark-嗅探及其防范\"><a class=\"markdownIt-Anchor\" href=\"#wireshark-嗅探及其防范\"></a> Wireshark 嗅探及其防范</h2>\n<h3 id=\"实验环境\"><a class=\"markdownIt-Anchor\" href=\"#实验环境\"></a> 实验环境</h3>\n<p>使用两台 Ubuntu 20.04 虚拟机作为 Server 和 Customer，使用 Windows10 物理机进行嗅探。</p>\n<h3 id=\"安装与配置-ftp\"><a class=\"markdownIt-Anchor\" href=\"#安装与配置-ftp\"></a> 安装与配置 FTP</h3>\n<p>在 Server 安装 vsftpd：</p>\n<pre class=\"highlight\"><code class=\"plain\">sudo apt-get install vsftpd\nsudo systemctl status vsftpd\n</code></pre>\n<p>vsftpd 服务启动：</p>\n<img src=\"/assets/images/buaa-security/cap/ftp-1.png\" width=\"85%\" />\n<p>配置 FTP 可写：</p>\n<pre class=\"highlight\"><code class=\"plain\">sudo gedit /etc/vsftpd.conf\n</code></pre>\n<ul>\n<li>\n<p>取消以下内容的注释：</p>\n<pre class=\"highlight\"><code class=\"plain\">write_enable=YES\n</code></pre>\n</li>\n</ul>\n<p>配置 FTP 账户：</p>\n<pre class=\"highlight\"><code class=\"plain\">sudo adduser newftpuser\necho &quot;newftpuser&quot; | sudo tee -a /etc/vsftpd.user_list\n</code></pre>\n<p>配置账户写权限：</p>\n<pre class=\"highlight\"><code class=\"plain\">sudo mkdir -p /home/newftpuser/ftp/upload\nsudo chmod 550 /home/newftpuser/ftp\nsudo chmod 750 /home/newftpuser/ftp/upload\nsudo chown -R newftpuser: /home/newftpuser/ftp\n</code></pre>\n<p>禁用 Shell 访问：</p>\n<pre class=\"highlight\"><code class=\"plain\">echo -e '#!/bin/sh\\necho &quot;This account is limited to FTP access only.&quot;' | sudo tee -a  /bin/ftponly\nsudo chmod a+x /bin/ftponly\necho &quot;/bin/ftponly&quot; | sudo tee -a /etc/shells\nsudo usermod newftpuser -s /bin/ftponly\n</code></pre>\n<p>在 Server 上创建文件：</p>\n<img src=\"/assets/images/buaa-security/cap/ftp-2.png\" width=\"85%\" />\n<p>在 Customer 上访问文件：</p>\n<img src=\"/assets/images/buaa-security/cap/ftp-3.png\" width=\"85%\" />\n<h3 id=\"使用-wireshark-嗅探\"><a class=\"markdownIt-Anchor\" href=\"#使用-wireshark-嗅探\"></a> 使用 Wireshark 嗅探</h3>\n<p>连接过程结果如下，账号密码一览无余：</p>\n<img src=\"/assets/images/buaa-security/cap/ftp-4.jpg\" />\n<p>传输过程结果如下，传输内容一览无余：</p>\n<img src=\"/assets/images/buaa-security/cap/ftp-5.jpg\" width=\"70%\" />\n<h3 id=\"启动-tls-加密传输\"><a class=\"markdownIt-Anchor\" href=\"#启动-tls-加密传输\"></a> 启动 TLS 加密传输</h3>\n<p>生成证书：</p>\n<pre class=\"highlight\"><code class=\"plain\">sudo openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem\n</code></pre>\n<p>补充 FTP 配置：</p>\n<pre class=\"highlight\"><code class=\"plain\">sudo gedit /etc/vsftpd.conf\n</code></pre>\n<ul>\n<li>\n<p>设置证书路径：</p>\n<pre class=\"highlight\"><code class=\"plain\">rsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\n</code></pre>\n</li>\n<li>\n<p>启用 SSL：</p>\n<pre class=\"highlight\"><code class=\"plain\">ssl_enable=YES\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\n\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\n\nrequire_ssl_reuse=NO\nssl_ciphers=HIGH\n</code></pre>\n</li>\n</ul>\n<p>重启 vsftpd 服务：</p>\n<pre class=\"highlight\"><code class=\"plain\">sudo systemctl restart vsftpd\n</code></pre>\n<p>在 nautilus 中尝试连接，无响应：</p>\n<img src=\"/assets/images/buaa-security/cap/ftp-6.png\" width=\"85%\" />\n<p>在命令行中尝试连接，报错如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">chenrt@ubuntu:~$ ftp 192.168.40.134\nConnected to 192.168.40.134.\n220 (vsFTPd 3.0.3)\nName (192.168.40.134:chenrt): newftpuser\n530 Non-anonymous sessions must use encryption.\nLogin failed.\n421 Service not available, remote server has closed connection\n</code></pre>\n<p>发现错误原因在于客户端不支持 SSL 认证，换一个厉害的客户端即可，下采用 FileZilla：</p>\n<pre class=\"highlight\"><code class=\"plain\">sudo apt-get install filezilla\n</code></pre>\n<p>信任证书，连接成功：</p>\n<img src=\"/assets/images/buaa-security/cap/ftp-7.png\" width=\"85%\" />\n<img src=\"/assets/images/buaa-security/cap/ftp-8.png\" width=\"85%\" />\n<h3 id=\"再次使用-wireshark-嗅探\"><a class=\"markdownIt-Anchor\" href=\"#再次使用-wireshark-嗅探\"></a> 再次使用 Wireshark 嗅探</h3>\n<p>使用 FTP 下载文件：</p>\n<img src=\"/assets/images/buaa-security/cap/ftp-9.png\" width=\"85%\" />\n<p>嗅探结果如下，未发现敏感信息：</p>\n<img src=\"/assets/images/buaa-security/cap/ftp-10.jpg\" />\n<img src=\"/assets/images/buaa-security/cap/ftp-11.jpg\" width=\"70%\" />\n<h3 id=\"网页登录邮箱\"><a class=\"markdownIt-Anchor\" href=\"#网页登录邮箱\"></a> 网页登录邮箱</h3>\n<p>以登录北航邮箱为例，可见其基于 TCP 协议并通过 TLS 保证了安全性，如下图：</p>\n<img src=\"/assets/images/buaa-security/cap/email.jpg\" />\n<h3 id=\"关于-fiddler-和-wireshark\"><a class=\"markdownIt-Anchor\" href=\"#关于-fiddler-和-wireshark\"></a> 关于 Fiddler 和 Wireshark</h3>\n<p>二者的原理存在本质上的不同，Wireshark 的原理是将网卡设置为混杂模式，抓取流经网卡的数据包，从而在局域网内抓包，Fiddler 是将通过本机的流量代理到特定的端口，由 Fiddler 处理并重新发送，从而在局域网内抓包。</p>\n<p>由于 Fiddler 中间人的角色，导入由 Fiddler 给出的证书后，流量即可被 Fiddler 解密，因此 Wireshark 正常情况下无法解密的经过 TLS 加密的包可以被 Fiddler 解密，以北航邮箱登录请求为例，如下图所示：</p>\n<img src=\"/assets/images/buaa-security/cap/cmp.jpg\" />\n<h2 id=\"nessus-扫描工具的安装与使用\"><a class=\"markdownIt-Anchor\" href=\"#nessus-扫描工具的安装与使用\"></a> Nessus 扫描工具的安装与使用</h2>\n<h3 id=\"实验环境-2\"><a class=\"markdownIt-Anchor\" href=\"#实验环境-2\"></a> 实验环境</h3>\n<p>在 Kali Linux Rolling x 虚拟机中安装 Nessus，测试环境包括 Windows7 虚拟机和 Ubuntu 20.04 虚拟机。</p>\n<h3 id=\"安装与配置-nessus\"><a class=\"markdownIt-Anchor\" href=\"#安装与配置-nessus\"></a> 安装与配置 Nessus</h3>\n<p>安装 Nessus 并启动服务：</p>\n<pre class=\"highlight\"><code class=\"plain\">sudo dpkg -i Nessus-8.15.4-ubuntu1110_amd64.deb\nservice nessusd start\n</code></pre>\n<p>在 Web 页面中配置 Nessus：</p>\n<img src=\"/assets/images/buaa-security/nessus/install-1.png\" width=\"85%\" />\n<img src=\"/assets/images/buaa-security/nessus/install-2.png\" width=\"85%\" />\n<p>设置本地账号密码：</p>\n<img src=\"/assets/images/buaa-security/nessus/install-3.png\" width=\"85%\" />\n<p>等待 Nessus 初始化，这个过程并不需要太长时间：</p>\n<img src=\"/assets/images/buaa-security/nessus/install-4.png\" width=\"85%\" />\n<p>初始化完成，此时没有 Scans 标签页：</p>\n<img src=\"/assets/images/buaa-security/nessus/install-5.png\" width=\"85%\" />\n<p>本地生成激活码：</p>\n<pre class=\"highlight\"><code class=\"plain\">cd /opt/nessus/sbin\nsudo ./nessuscli fetch --challenge\n</code></pre>\n<p>和注册账号时填写的邮箱收到的激活码一起输入上面指令执行后给出的链接对应的页面：</p>\n<img src=\"/assets/images/buaa-security/nessus/install-6.png\" width=\"85%\" />\n<p>得到证书和插件：</p>\n<img src=\"/assets/images/buaa-security/nessus/install-7.png\" width=\"85%\" />\n<p>导入证书和插件：</p>\n<pre class=\"highlight\"><code class=\"plain\">sudo ./nessuscli fetch --register-offline ~/nessus.license\nsudo ./nessuscli update ~/all-2.0.tar.gz\nservice nessusd restart\n</code></pre>\n<p>等待插件编译完成，Web 界面中出现 Scans，这个过程不出意外要等很久：</p>\n<img src=\"/assets/images/buaa-security/nessus/scan-1.png\" width=\"85%\" />\n<p>可创建并进行扫描：</p>\n<img src=\"/assets/images/buaa-security/nessus/scan-2.png\" width=\"85%\" />\n<img src=\"/assets/images/buaa-security/nessus/scan-3.png\" width=\"85%\" />\n<h3 id=\"使用-nessus-扫描\"><a class=\"markdownIt-Anchor\" href=\"#使用-nessus-扫描\"></a> 使用 Nessus 扫描</h3>\n<p>扫描个人 Windows7 虚拟机，Windows7 早已停止维护，不出意外存在若干严重漏洞及中高危漏洞：</p>\n<img src=\"/assets/images/buaa-security/nessus/scan-4.png\" width=\"85%\" />\n<p>扫描个人 Ubuntu 虚拟机，今年年初更新过，未发现漏洞：</p>\n<img src=\"/assets/images/buaa-security/nessus/scan-5.png\" width=\"85%\" />\n<p>扫描个人 Windows10 物理机，关闭防火墙的情况下发现中危漏洞，包括远端 SMB 服务器上未启用签名，和存在自签名证书：</p>\n<img src=\"/assets/images/buaa-security/nessus/scan-6.png\" width=\"85%\" />\n<ul>\n<li>\n<p>自签名证书实际上是为了便于 Fiddler 解密 HTTPS 的数据包而安装的：</p>\n<img src=\"/assets/images/buaa-security/nessus/scan-7.png\" width=\"85%\" />\n</li>\n</ul>\n<h3 id=\"启动防火墙后扫描\"><a class=\"markdownIt-Anchor\" href=\"#启动防火墙后扫描\"></a> 启动防火墙后扫描</h3>\n<p>在 Windows10 物理机上打开防火墙，重新扫描未发现漏洞：</p>\n<img src=\"/assets/images/buaa-security/nessus/scan-8.png\" width=\"85%\" />\n","length":"1.1k","time":"5min","categories":["Buaa","Security"],"tags":["Wireshark","Nessus","FTP"]}