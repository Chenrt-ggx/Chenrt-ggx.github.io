{"id":"f3bc6559f347","title":"Sublime Text 构建系统简介及若干配置示例","created":"2022-04-02T04:21:48.000Z","updated":"2022-04-02T04:21:48.000Z","raw":"<p>[迁移自博客园] | 愿你 Coding 一生，归来仍是 Sublime Text。</p>\n<span id=\"more\"></span>\n<h2 id=\"sublime-text-构建系统\"><a class=\"markdownIt-Anchor\" href=\"#sublime-text-构建系统\"></a> Sublime Text 构建系统</h2>\n<p>Sublime Text 提供构建系统（Build Systems）以允许用户运行外部程序，构建系统通过 JSON 的形式指定并保存在 sublime-build 文件中，功能包括：根据文件类型自动选择构建系统、记住上次使用的构建系统、构建系统结果的导航、取消执行构建等。</p>\n<p>Sublime Text 中，用户新增构建系统的方式为“<strong>工具 - 构建系统 - 新建构建系统</strong>”，新建的构建系统位于：</p>\n<ul>\n<li>安装目录下 Data/Packages/User 中（Windows 平台）。</li>\n<li>用户文件夹下 .config/sublime-text-3/Packages/User 中（Linux 平台）。</li>\n</ul>\n<p>下文主要整理一些关键/常用/官方文档没有详细涉及的内容，Sublime Text 构建系统的完整介绍可参考<a href=\"https://www.sublimetext.com/docs/build_systems.html\">官方文档</a>。</p>\n<h2 id=\"修改内置构建系统\"><a class=\"markdownIt-Anchor\" href=\"#修改内置构建系统\"></a> 修改内置构建系统</h2>\n<p>Sublime Text 内置了一些常见语言的构建系统，内置的构建系统使用 Sublime Text 提供的控制台，其不同于 VSCode，无法处理用户输入，可能的解决方案包括：</p>\n<ul>\n<li>使用 Sublime REPL 插件，其性能较差，个人不是很推荐。</li>\n<li>修改内置构建系统，改为使用其它终端，例如 cmd、gnome-terminal、konsole 等。</li>\n</ul>\n<p>Sublime Text 内置的构建系统位于 Sublime Text 安装目录下 Packages 目录中的 sublime-package 文件内，sublime-package 文件实质上是压缩文件，用解压软件打开即可修改其中的 sublime-build 文件，这样就无需通过新建一个构建系统的方式“曲线救国”。</p>\n<p>需要注意的是 C 和 C++ 的配置均位于 C++.sublime-package 中，此外如果一个 sublime-package 文件中没有对应的 sublime-build 文件，向其中添加 sublime-build 文件后，该 sublime-build 文件对应的构建系统可以正常加载。</p>\n<p>个人建议长期使用的构建系统以内置构建系统的方式存储，临时使用的构建系统使用“<strong>工具 - 构建系统 - 新建构建系统</strong>”的方式添加。</p>\n<h2 id=\"部分配置字段说明\"><a class=\"markdownIt-Anchor\" href=\"#部分配置字段说明\"></a> 部分配置字段说明</h2>\n<ul>\n<li>\n<p><code>cmd</code> 字段：</p>\n<ul>\n<li><code>shell_cmd</code> 字段为空时需要，会被 <code>shell_cmd</code> 字段覆盖。</li>\n<li><code>cmd</code> 字段在 Sublime Text 中的执行方式是 <code>subprocess.Popen(cmd)</code>。</li>\n</ul>\n</li>\n<li>\n<p><code>shell_cmd</code> 字段：</p>\n<ul>\n<li><code>cmd</code> 字段为空时需要，会覆盖 <code>cmd</code> 字段。</li>\n<li><code>cmd</code> 字段在 Sublime Text 中的执行方式是 <code>subprocess.Popen(shell_cmd, shell=True)</code>。</li>\n</ul>\n</li>\n<li>\n<p><code>shell</code> 字段：</p>\n<ul>\n<li><code>shell_cmd</code> 字段为空时有效，用来影响 <code>cmd</code> 字段。</li>\n<li>设置此字段时，<code>cmd</code> 字段中的命令将通过 Shell 运行，似乎可以认为 <code>cmd + shell = shell_cmd</code>。</li>\n</ul>\n</li>\n<li>\n<p><code>file_regex</code> 字段：</p>\n<ul>\n<li>用于获取构建时的报错，从而在代码中高亮标注出来。</li>\n<li>可捕获“文件名”、“行号”、“行内偏移”、“错误信息”中的部分或全部内容，详见<a href=\"https://www.sublimetext.com/docs/build_systems.html\">官方文档</a>。</li>\n</ul>\n</li>\n<li>\n<p><code>selector</code> 字段：</p>\n<ul>\n<li>设置了“<strong>工具 - 构建系统 - 自动</strong>”之后，根据此字段选择使用的构建系统。</li>\n<li>需要注意的是，这个字段对应的不是文件扩展名，而是“<strong>视图 - 语法</strong>”中的语法名。</li>\n</ul>\n</li>\n<li>\n<p><code>variants</code> 字段：</p>\n<ul>\n<li>用于在一个 sublime-build 中设置多个构建选项，可以通过“<strong>工具 - 用…构建</strong>”选择。</li>\n<li>非首次使用时，“<strong>工具 - 构建</strong>”会使用上一次使用的构建选项，无需每次构建时指定构建选项。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"配置与测试\"><a class=\"markdownIt-Anchor\" href=\"#配置与测试\"></a> 配置与测试</h2>\n<p>笔者为 C、C++、GoLang、Java、JavaScrips、Python、Scala 编写了用于 Windows CMD、Gnome Terminal 和 KDE Konsole 的配置文件，见<a href=\"https://github.com/Chenrt-ggx/Chenrt-ggx.github.io/tree/gh-pages/assets/sublime\">代码仓库</a>，其中：</p>\n<ul>\n<li>对于 C、C++、GoLang，文件名、行号/行内偏移、错误信息都可以正常抓取。</li>\n<li>GoLang 支持解释执行和编译执行，配置中选择编译执行，以获取报错信息。</li>\n<li>Java 中错误信息的行内偏移通过 <code>^</code> 指示的形式给出，因此无法抓取，文件名、行号、错误信息可以正常抓取。</li>\n<li>对于解释型语言 JavaScript 和 Python，错误信息将在执行时产生，无法抓取也无需进行相应配置。</li>\n<li>Scala 中更详细的错误信息和其它信息并不在同一行，因此无法抓取，Sublime Text 将匹配 <code>file_regex</code> 的整行作为错误信息，文件名、行号、错误信息可以正常抓取。此外一个坑点是需要使用 -color 避免抓取到用于控制颜色的乱码。</li>\n</ul>\n<p>笔者同时为 C、C++、GoLang、Java、JavaScrips、Python、Scala 编写了包含输入的正确程序（A + B Problem），包含语法错误的程序和不包含输入的正确程序（Hello World）用于测试，见<a href=\"https://github.com/Chenrt-ggx/Chenrt-ggx.github.io/tree/gh-pages/assets/sublime/testcases\">代码仓库</a>。</p>\n<h2 id=\"插件与杂项\"><a class=\"markdownIt-Anchor\" href=\"#插件与杂项\"></a> 插件与杂项</h2>\n<h3 id=\"跨文件补全\"><a class=\"markdownIt-Anchor\" href=\"#跨文件补全\"></a> 跨文件补全</h3>\n<blockquote>\n<p>使用插件 All Autocomplete 完成。</p>\n</blockquote>\n<p>此补全支持从所有打开的文件中进行匹配，和 Sublime Text 自带的补全类似，是不考虑语义信息的语法补全，实际使用中体验尚可。</p>\n<h3 id=\"文件比对\"><a class=\"markdownIt-Anchor\" href=\"#文件比对\"></a> 文件比对</h3>\n<blockquote>\n<p>使用插件 Compare Side-By-Side 完成。</p>\n</blockquote>\n<p>Sublime 的文件比对插件采用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的最长公共子序列实现，性能弱于采用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span><span class=\"mclose\">)</span></span></span></span> 实现的 VSCode 和 JetBrains 系列 IDE（效果似乎也是 Sublime Text 差一些，一些可以行内调整的情况会被 Sublime Text 判定为整行替换），只适合比较小的文件。</p>\n<h3 id=\"sublime-text-版本\"><a class=\"markdownIt-Anchor\" href=\"#sublime-text-版本\"></a> Sublime Text 版本</h3>\n<p>Sublime Text 目前存在 Sublime Text 3 和 Sublime Text 4 两个主要版本，笔者认为 Sublime Text 3 体验更佳，原因包括：</p>\n<ul>\n<li>Sublime Text 4 在补全方面存在提升但提升有限，却造成了性能一定程度的下降，与笔者对 Sublime Text 轻量编辑器的定位不一致，如果追求更好的补全，VSCode 和 JetBrains 系列 IDE 是更好的选择。</li>\n<li>Sublime Text 4 相比于 Sublime Text 3 在 UI 方面不太符合个人审美。</li>\n</ul>\n","length":"1.4k","time":"6min","categories":["Environment"],"tags":["Config","Sublime Text"]}