{"id":"87d7c9dddc7a","title":"面向对象设计与构造第三单元博客作业","created":"2021-05-29T02:39:03.000Z","updated":"2021-05-29T02:39:03.000Z","raw":"<p>[迁移自博客园] | BUAA Object Oriented 2021 Unit3 Summary</p>\n<span id=\"more\"></span>\n<h2 id=\"第一次作业总结\"><a class=\"markdownIt-Anchor\" href=\"#第一次作业总结\"></a> 第一次作业总结</h2>\n<h3 id=\"类关系图\"><a class=\"markdownIt-Anchor\" href=\"#类关系图\"></a> 类关系图</h3>\n<p>简洁起见，省略了异常处理部分。</p>\n<img src=\"/assets/images/buaa-oo/unit3/hw1-uml.jpg\" width=\"50%\" />\n<h3 id=\"基于度量的结构分析\"><a class=\"markdownIt-Anchor\" href=\"#基于度量的结构分析\"></a> 基于度量的结构分析</h3>\n<ul>\n<li>\n<p>代码规模统计：</p>\n<img src=\"/assets/images/buaa-oo/unit3/hw1-line.jpg\" width=\"65%\" />\n</li>\n<li>\n<p>类复杂度统计：</p>\n<img src=\"/assets/images/buaa-oo/unit3/hw1-class.jpg\" width=\"25%\" />\n</li>\n<li>\n<p>方法复杂度统计：</p>\n<img src=\"/assets/images/buaa-oo/unit3/hw1-method.jpg\" width=\"45%\" />\n</li>\n</ul>\n<h3 id=\"操作实现方式与性能分析\"><a class=\"markdownIt-Anchor\" href=\"#操作实现方式与性能分析\"></a> 操作实现方式与性能分析</h3>\n<ul>\n<li>\n<p>ap 操作：</p>\n<ul>\n<li>含义：添加一个人到社交网络。</li>\n<li>处理：维护一个 PersonMap 进行人 id 到人对象的映射。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>ar 操作：</p>\n<ul>\n<li>含义：添加两个人之间的关系。</li>\n<li>处理：对每个人，维护一个 AcquaintanceMap 进行他认识的人 id 到人对象的映射，维护一个 ValueMap 进行他认识的人 id 到两人关系值的映射。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>qv 操作：</p>\n<ul>\n<li>含义：查询两个人的关系值。</li>\n<li>处理：直接在第一个人的 ValueMap 中查找第二个人 id 对应的 value 即可。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>cn 操作：</p>\n<ul>\n<li>含义：按字典比较两个人的姓名。</li>\n<li>处理：从 PersonMap 中找出两个人，进行字符串比较即可。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>qnr 操作：</p>\n<ul>\n<li>含义：查询人名按字典序的排名。</li>\n<li>处理：平衡树维护，添加人的时候额外插入平衡树，这里采用 AVL 树。</li>\n<li>性能：ap 操作插入复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span><span class=\"mclose\">)</span></span></span></span>，回答询问复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<p>平衡树测试可参考<a href=\"https://www.luogu.com.cn/problem/P3369\">洛谷 P3369</a>，感谢昂神贡献数据 orz。</p>\n<img src=\"/assets/images/buaa-oo/unit3/luogu.jpg\" width=\"75%\" />\n<p>关于平衡树选择的补充：</p>\n<ul>\n<li>Red Black Tree：拥有最强的性能，但编码复杂度同样最高。</li>\n<li>Size Balanced Tree：实现比较简单，本地测试性能仅次于红黑树。</li>\n<li>AVL Tree：实现比较简单，性能和 Size Balanced Tree 差别不大。</li>\n<li>Rotate Based Treap：实现最简单的平衡树之一，相比上述几种平衡树性能稍差。</li>\n<li>Splay：个人用不太习惯的平衡树，以伸展操作为核心，功能强大但常数略大。</li>\n<li>FHQ Treap：实现最简单的平衡树之一，以分裂合并操作为核心，功能比较强大但常数比 Splay 还大。</li>\n<li>Scapegoat Tree：实现比较暴力，调好参数性能还算说得过去。</li>\n</ul>\n<p>关于其它做法的补充：</p>\n<ul>\n<li>暴力做法：复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，由于第一次作业 n 很小，后两次作业保证了 qnr 的数量很少，因此这种做法是可行的。</li>\n<li>字典树做法：复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，维护一棵字典树，每个结点使用树状数组维护 128 个儿子进行快速区间求和。</li>\n<li>qnr 采用高性能做法的好处是，构造数据时可以无视 qnr 指令数限制，从而同时提升测试数据强度和测试效率。</li>\n</ul>\n</li>\n<li>\n<p>qps 操作：</p>\n<ul>\n<li>含义：查询总人数。</li>\n<li>处理：直接返回 PersonMap 的大小即可。</li>\n<li>性能：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>qci 操作：</p>\n<ul>\n<li>含义：查询两人是否“连通”。</li>\n<li>处理：按秩合并并查集维护，添加人时插入并查集，添加关系时在并查集连边。</li>\n<li>性能：ap 操作维护复杂度均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，ar 操作维护复杂度均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，qci 操作查询复杂度均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<p>关于其它做法的补充：</p>\n<ul>\n<li>暴力做法：DFS 或 BFS 复杂度均 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，第一次作业 n 很小，这样做可过，第三次作业 CPU 时间限制宽松，这样做可过，但第二次作业这样做多询问几次就可以卡超时。</li>\n<li>朴素并查集：均摊复杂度同样是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，但可以构造数据产生长链，最后递归合并时会有多层递归，可能导致爆栈，根据实现不同可导致爆栈的最小递归层数不完全相同。</li>\n</ul>\n<p>对于朴素并查集，可考虑以下代码：</p>\n<pre class=\"highlight\"><code class=\"java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">link</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id1, <span class=\"hljs-type\">int</span> id2)</span> &#123;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">f1</span> <span class=\"hljs-operator\">=</span> father(id1);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">f2</span> <span class=\"hljs-operator\">=</span> father(id2);\n    <span class=\"hljs-keyword\">if</span> (f1 != f2) &#123;\n        blocks.put(f2, blocks.get(f1));\n    &#125;\n&#125;\n</code></pre>\n<p>这时只要先从 1 到 5000 添加 5000 人，再从 2 -&gt; 1 到 5000 -&gt; 4999 添加 4999 个关系，就会得到一条长度是 5000 的链，对 1 和 5000 添加关系时，将进行 5000 层递归，在一些实现下可能会爆栈，可以通过非递归路径压缩或按秩合并解决此问题。</p>\n<blockquote>\n<p>迁博客时注：上述爆栈的情况仅在 Windows 本地触发成功，Linux 下似乎不会出问题。</p>\n</blockquote>\n</li>\n<li>\n<p>qbs 操作：</p>\n<ul>\n<li>含义：查询连通块数量。</li>\n<li>处理：在并查集中额外维护连通块数量，添加人时数量增加，添加关系时若本没有关系则数量减少。</li>\n<li>性能：ap 操作维护复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，ar 操作维护复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，qbs 操作查询复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<p>补充：善良的课程组没整删除关系操作，不然想必会很刺激。</p>\n</li>\n</ul>\n<h3 id=\"基于-jml-规格的测试方法与策略分析\"><a class=\"markdownIt-Anchor\" href=\"#基于-jml-规格的测试方法与策略分析\"></a> 基于 JML 规格的测试方法与策略分析</h3>\n<ul>\n<li>\n<p>正确性测试：</p>\n<ul>\n<li>对人的随机范围，枚举 maxn，maxn/10，maxn/100，maxn/1000，共计四种情况。</li>\n<li>对指令的随机范围，枚举全部指令两次和六个询问类指令，共计八种情况。</li>\n<li>对于数据特征，枚举直接随机，前 maxn/2 条指令只随机非询问类指令用于网络的构建，其余指令随机，前 maxn/10 条指令只随机询问类指令用于测试异常，其余指令随机，共三种情况。</li>\n</ul>\n</li>\n<li>\n<p>非正确性测试：</p>\n<ul>\n<li>本次作业需要测试性能的主要是 qnr 和 qci，这两个指令复杂度超标时无需刻意构造，堆指令数量即可。</li>\n<li>因此上述正确性测试中天然包含非正确性测试，无需单独构造。</li>\n</ul>\n</li>\n<li>\n<p>测试强度评估：</p>\n<ul>\n<li>\n<p>采用打标签统计覆盖情况的方式进行评估，标签设置如下：</p>\n<pre class=\"highlight\"><code class=\"c++\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *s[] = &#123;\n    <span class=\"hljs-string\">&quot;equal person in add person&quot;</span>,\n    <span class=\"hljs-string\">&quot;success in add person&quot;</span>,\n    <span class=\"hljs-string\">&quot;same person id in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;no person in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal relation in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;success in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;same person id in query value&quot;</span>,\n    <span class=\"hljs-string\">&quot;no person in query value&quot;</span>,\n    <span class=\"hljs-string\">&quot;no relation in query value&quot;</span>,\n    <span class=\"hljs-string\">&quot;success in query value&quot;</span>,\n    <span class=\"hljs-string\">&quot;same person id in compare name&quot;</span>,\n    <span class=\"hljs-string\">&quot;no person in compare name&quot;</span>,\n    <span class=\"hljs-string\">&quot;success in compare name&quot;</span>,\n    <span class=\"hljs-string\">&quot;no person in query name rank&quot;</span>,\n    <span class=\"hljs-string\">&quot;success in query name rank&quot;</span>,\n    <span class=\"hljs-string\">&quot;same person id in is circle&quot;</span>,\n    <span class=\"hljs-string\">&quot;no person in is circle&quot;</span>,\n    <span class=\"hljs-string\">&quot;success in is circle&quot;</span>\n&#125;;\n</code></pre>\n</li>\n<li>\n<p>对测试数据进行分析，统计总触发次数和单点最多触发次数，得到的覆盖情况如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">equal person in add person : 12584 with 376 max\nsuccess in add person : 8563 with 381 max\nsame person id in add relation : 542 with 31 max\nno person in add relation : 7410 with 256 max\nequal relation in add relation : 3379 with 205 max\nsuccess in add relation : 6423 with 227 max\nsame person id in query value : 292 with 82 max\nno person in query value : 5661 with 874 max\nno relation in query value : 2537 with 417 max\nsuccess in query value : 1449 with 375 max\nsame person id in compare name : 291 with 90 max\nno person in compare name : 5510 with 881 max\nsuccess in compare name : 4112 with 561 max\nno person in query name rank : 4843 with 897 max\nsuccess in query name rank : 4653 with 627 max\nsame person id in is circle : 290 with 88 max\nno person in is circle : 5571 with 880 max\nsuccess in is circle : 4067 with 655 max\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二次作业总结\"><a class=\"markdownIt-Anchor\" href=\"#第二次作业总结\"></a> 第二次作业总结</h2>\n<h3 id=\"类关系图-2\"><a class=\"markdownIt-Anchor\" href=\"#类关系图-2\"></a> 类关系图</h3>\n<p>简洁起见，省略了异常处理部分。</p>\n<img src=\"/assets/images/buaa-oo/unit3/hw2-uml.jpg\" width=\"50%\" />\n<h3 id=\"基于度量的结构分析-2\"><a class=\"markdownIt-Anchor\" href=\"#基于度量的结构分析-2\"></a> 基于度量的结构分析</h3>\n<ul>\n<li>\n<p>代码规模统计：</p>\n<img src=\"/assets/images/buaa-oo/unit3/hw2-line.jpg\" width=\"65%\" />\n</li>\n<li>\n<p>类复杂度统计：</p>\n<img src=\"/assets/images/buaa-oo/unit3/hw2-class.jpg\" width=\"25%\" />\n</li>\n<li>\n<p>方法复杂度统计：</p>\n<img src=\"/assets/images/buaa-oo/unit3/hw2-method.jpg\" width=\"45%\" />\n</li>\n</ul>\n<h3 id=\"操作实现方式与性能分析-2\"><a class=\"markdownIt-Anchor\" href=\"#操作实现方式与性能分析-2\"></a> 操作实现方式与性能分析</h3>\n<ul>\n<li>\n<p>ag 操作：</p>\n<ul>\n<li>含义：添加一个组。</li>\n<li>处理：维护一个 GroupMap 进行组 id 到组对象的映射。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>atg 操作：</p>\n<ul>\n<li>含义：向组内加人。</li>\n<li>处理：对每个人，维护一个 GroupPersonMap 进行组内的人 id 到人对象的映射。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>qgs 操作：</p>\n<ul>\n<li>含义：查询组数。</li>\n<li>处理：直接返回 GroupMap 的大小即可。</li>\n<li>性能：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>qgps 操作：</p>\n<ul>\n<li>含义：查询组内人数。</li>\n<li>处理：通过 GroupMap 获得对应的组，在返回其中 GroupPersonMap 的大小即可。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>qgvs 操作：</p>\n<ul>\n<li>含义：查询组内有向边权和。</li>\n<li>处理：插入删除时遍历被插入或删除的人认识的人，维护组内边权和。</li>\n<li>性能：插入删除维护复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，回答询问复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，因组人数存在上限 1111，这种做法不会超时。</li>\n</ul>\n<p>关于其它做法的补充：</p>\n<ul>\n<li>暴力做法：复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，随机数据下一般不会超时但可以构造数据卡超时，详见下文测试部分。</li>\n</ul>\n</li>\n<li>\n<p>qgam 操作：</p>\n<ul>\n<li>含义：查询组内年龄均值。</li>\n<li>处理：插入删除时维护组内成员年龄代数和。</li>\n<li>性能：插入删除维护复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，回答询问复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<p>关于其它做法的补充：</p>\n<ul>\n<li>暴力做法：复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，因组人数存在上限 1111，这种做法不会超时。</li>\n</ul>\n</li>\n<li>\n<p>qgav 操作：</p>\n<ul>\n<li>含义：查询组内年龄方差。</li>\n<li>处理：插入删除时维护组内成员年龄平方和，回答询问时利用代数和和平方和计算结果。</li>\n<li>性能：插入删除维护复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，回答询问复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<p>关于其它做法的补充：</p>\n<ul>\n<li>暴力做法：复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，因组人数存在上限 1111，这种做法不会超时。</li>\n</ul>\n</li>\n<li>\n<p>dfg 操作：</p>\n<ul>\n<li>含义：从组中删人。</li>\n<li>处理：从 GroupPersonMap 中删除即可。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>am 操作：</p>\n<ul>\n<li>含义：添加消息。</li>\n<li>处理：维护一个 MessageMap 进行消息 id 到消息对象的映射。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>sm 操作：</p>\n<ul>\n<li>含义：向某个认识的人（第一类）或所在的组中全部的人（第二类）发消息，以社交值的变化体现其效果。</li>\n<li>处理：对第一类消息，从 PersonMap 中找出两个人修改社交值即可，对第二类消息，从 GroupMap 中找出对应的组，再遍历修改社交值即可。</li>\n<li>性能：第一类消息均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，第二类消息均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，因组人数存在上限 1111，这种做法不会超时。</li>\n</ul>\n</li>\n<li>\n<p>qsv 操作：</p>\n<ul>\n<li>含义：查询社交值。</li>\n<li>处理：通过 PersonMap 访问对应的人获取社交值。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>qrm 操作：</p>\n<ul>\n<li>含义：查询收到的最近四条消息。</li>\n<li>处理：通过 PersonMap 访问对应的人获取最近四条消息。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于-jml-规格的测试方法与策略分析-2\"><a class=\"markdownIt-Anchor\" href=\"#基于-jml-规格的测试方法与策略分析-2\"></a> 基于 JML 规格的测试方法与策略分析</h3>\n<ul>\n<li>\n<p>正确性测试：</p>\n<ul>\n<li>可以发现，指令分为三个层次，基本指令（第一次作业的八条），组指令（新增的前八条），消息指令（新增的后四条），因此分基本测试，组测试，消息测试和综合测试四个层次。</li>\n<li>第一部分基本测试，同第一次作业进行处理，进行回归测试。</li>\n<li>第二部分组测试，类似第一部分的逻辑进行分类枚举，只要将询问指令集替换为组中的五个询问指令，在用于网络构建的指令中额外增加修改组的三个指令即可。</li>\n<li>第三部分消息测试，类似第一部分的逻辑进行分类枚举，增加一个消息范围的分类维度，并类似第二部分对询问的指令集进行替换，对用于网络构建的指令集进行扩充。</li>\n<li>第四部分综合测试，在第三部分的基础上，取消对询问指令的限制进行随机，综合测试全部指令。</li>\n</ul>\n</li>\n<li>\n<p>非正确性测试：</p>\n<ul>\n<li>组内多人测试：弥补随机数据下组内人数可能不足的问题，在生成器中用 Set 维护一下组内人员情况，保证组内人数维持在 1111 上下波动的同时进行组内查询。</li>\n<li>完全图压力测试：构造完全图进行组内查询，主要测试组内查询操作的性能，同时测试均值和方差的精度是否正确。</li>\n<li>并查集压力测试：针对朴素并查集可能产生长链的情况，构造针对性的数据（在 qci 中已说明数据构造策略）。</li>\n<li>进出组压力测试：添加 1111 人，将第一个人与余下所有人连边，所有人进组第一个人重复进出组，测试 atg 和 dfg 的性能。</li>\n<li>qgvs 针对性测试：添加 1111 人，全部进组后持续 qgvs，专治暴力做法。</li>\n</ul>\n</li>\n<li>\n<p>测试强度评估：</p>\n<ul>\n<li>\n<p>采用打标签统计覆盖情况的方式进行评估，标签设置如下：</p>\n<pre class=\"highlight\"><code class=\"c++\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *s[] = &#123;\n    <span class=\"hljs-string\">&quot;equal person in add person&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add person&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal id in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal relation in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;push up group in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal id in query value&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in query value&quot;</span>,\n    <span class=\"hljs-string\">&quot;null relation in query value&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query value&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal id in compare name&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in compare name&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in compare name&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query people sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in query name rank&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query name rank&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal id in query is circle&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in query is circle&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query is circle&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query block sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal group in add group&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add group&quot;</span>,\n    <span class=\"hljs-string\">&quot;null group in add to group&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in add to group&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal person in add to group&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add to group&quot;</span>,\n    <span class=\"hljs-string\">&quot;more than 1111 in add to group&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query in query group sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;null group in query group people sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query group people sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;null group in query group value sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query group value sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;null group in query group age mean&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query group age mean&quot;</span>,\n    <span class=\"hljs-string\">&quot;null group in query group age var&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query group age var&quot;</span>,\n    <span class=\"hljs-string\">&quot;null group in delete from group&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in delete from group&quot;</span>,\n    <span class=\"hljs-string\">&quot;already delete in delete from group&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in delete from group&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal message in add message&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal person in add message&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add message type 0&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add message type 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;null message in send message&quot;</span>,\n    <span class=\"hljs-string\">&quot;null relation in send message&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send message type 0&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in group in send message&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send message type 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in query social value&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query social value&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in query received messages&quot;</span>,\n    <span class=\"hljs-string\">&quot;less than 4 in query received messages&quot;</span>,\n    <span class=\"hljs-string\">&quot;more than 4 in query received messages&quot;</span>,\n    <span class=\"hljs-string\">&quot;empty in query received messages&quot;</span>\n&#125;;\n</code></pre>\n</li>\n<li>\n<p>对测试数据进行分析，统计总触发次数和单点最多触发次数，得到的覆盖情况如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">equal person in add person : 442748 with 4500 max\nsucceed in add person : 439058 with 2716 max\nequal id in add relation : 5270 with 90 max\nnull person in add relation : 239636 with 1303 max\nequal relation in add relation : 45261 with 978 max\nsucceed in add relation : 148726 with 4005 max\npush up group in add relation : 12471 with 142 max\nequal id in query value : 1489 with 98 max\nnull person in query value : 92770 with 2564 max\nnull relation in query value : 31710 with 1747 max\nsucceed in query value : 13555 with 1858 max\nequal id in compare name : 1474 with 97 max\nnull person in compare name : 92709 with 2583 max\nsucceed in compare name : 45166 with 2463 max\nsucceed in query people sum : 162285 with 2874 max\nnull person in query name rank : 71637 with 331 max\nsucceed in query name rank : 43517 with 333 max\nequal id in query is circle : 1265 with 20 max\nnull person in query is circle : 80597 with 333 max\nsucceed in query is circle : 35170 with 333 max\nsucceed in query block sum : 138521 with 2557 max\nequal group in add group : 1812 with 9 max\nsucceed in add group : 4153 with 10 max\nnull group in add to group : 151940 with 545 max\nnull person in add to group : 74293 with 385 max\nequal person in add to group : 11950 with 166 max\nsucceed in add to group : 65188 with 1944 max\nmore than 1111 in add to group : 280 with 110 max\nsucceed in query in query group sum : 142697 with 2556 max\nnull group in query group people sum : 87531 with 2606 max\nsucceed in query group people sum : 79068 with 1542 max\nnull group in query group value sum : 89926 with 2639 max\nsucceed in query group value sum : 101249 with 3419 max\nnull group in query group age mean : 88900 with 2614  max\nsucceed in query group age mean : 80766 with 2777  max\nnull group in query group age var : 85708 with 2615  max\nsucceed in query group age var : 84151 with 2777  max\nnull group in delete from group : 152040 with 557  max\nnull person in delete from group : 72989 with 369  max\nalready delete in delete from group : 45701 with 312  max\nsucceed in delete from group : 13386 with 834  max\nequal message in add message : 15987 with 295  max\nequal person in add message : 708 with 11  max\nsucceed in add message type 0 : 26417 with 200  max\nsucceed in add message type 1 : 16048 with 173  max\nnull message in send message : 180946 with 418  max\nnull relation in send message : 13887 with 266  max\nsucceed in send message type 0 : 1677 with 44  max\nnull person in group in send message : 9385 with 199  max\nsucceed in send message type 1 : 997 with 29  max\nnull person in query social value : 215301 with 2785  max\nsucceed in query social value : 146483 with 2557  max\nnull person in query received messages : 194461 with 2739  max\nless than 4 in query received messages : 10397 with 758  max\nmore than 4 in query received messages : 116 with 38  max\nempty in query received messages : 112918 with 2559  max\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三次作业总结\"><a class=\"markdownIt-Anchor\" href=\"#第三次作业总结\"></a> 第三次作业总结</h2>\n<h3 id=\"类关系图-3\"><a class=\"markdownIt-Anchor\" href=\"#类关系图-3\"></a> 类关系图</h3>\n<p>简洁起见，省略了异常处理部分。</p>\n<img src=\"/assets/images/buaa-oo/unit3/hw2-uml.jpg\" width=\"50%\" />\n<h3 id=\"基于度量的结构分析-3\"><a class=\"markdownIt-Anchor\" href=\"#基于度量的结构分析-3\"></a> 基于度量的结构分析</h3>\n<ul>\n<li>\n<p>代码规模统计：</p>\n<img src=\"/assets/images/buaa-oo/unit3/hw2-line.jpg\" width=\"65%\" />\n</li>\n<li>\n<p>类复杂度统计：</p>\n<img src=\"/assets/images/buaa-oo/unit3/hw2-class.jpg\" width=\"25%\" />\n</li>\n<li>\n<p>方法复杂度统计：</p>\n<img src=\"/assets/images/buaa-oo/unit3/hw2-method.jpg\" width=\"45%\" />\n</li>\n</ul>\n<h3 id=\"操作实现方式与性能分析-3\"><a class=\"markdownIt-Anchor\" href=\"#操作实现方式与性能分析-3\"></a> 操作实现方式与性能分析</h3>\n<ul>\n<li>\n<p>sm 操作：</p>\n<ul>\n<li>含义：新增两个操作，若被发送的消息是表情消息，表情热度加一，若被发送的消息是红包消息，修改人的钱数。</li>\n<li>处理：与原处理一致，从 PersonMap 中找出两个人维护即可，或从 GroupMap 中找出对应的组，遍历维护即可。</li>\n<li>性能：第一类消息均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，第二类消息均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，因组人数存在上限 1111，这种做法不会超时。</li>\n</ul>\n</li>\n<li>\n<p>arem 操作：</p>\n<ul>\n<li>含义：添加红包消息。</li>\n<li>处理：因红包消息实现了消息接口，只需要插入 MessageMap 即可。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>anm 操作：</p>\n<ul>\n<li>含义：添加通知消息。</li>\n<li>处理：因通知消息实现了消息接口，只需要插入 MessageMap 即可。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>aem 操作：</p>\n<ul>\n<li>含义：添加表情消息。</li>\n<li>处理：因表情消息实现了消息接口，只需要插入 MessageMap 即可。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>sei 操作：</p>\n<ul>\n<li>含义：添加表情。</li>\n<li>处理：维护一个 EmojiMap 进行表情 id 到表情热度的映射。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>qp 操作：</p>\n<ul>\n<li>含义：查询表情热度。</li>\n<li>处理：通过 EmojiMap 访问对应的表情获取其热度。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>dce 操作：</p>\n<ul>\n<li>含义：删除热度低于给定限制的表情。</li>\n<li>处理：遍历表情找出热度低于限制的表情集合 DelSet 并从 EmojiMap 中删除，遍历消息并删除表情存在于 DelSet 的表情消息。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<p>关于其它做法的补充：</p>\n<ul>\n<li>更加普遍的做法：遍历表情，删除热度低于限制的表情，遍历消息，删除表情不存在的表情消息，同样正确且符合性能要求。</li>\n<li>笔者之所以没有采用这种做法，是考虑到表情是需要逐个添加的，不会存在大量要删除大量表情的 dce 操作，因此 DelSet 往往比删除表情后的 EmojiMap 小得多，从 DelSet 查找比从 EmojiMap 中查找有更小的常数。</li>\n</ul>\n</li>\n<li>\n<p>qm 操作：</p>\n<ul>\n<li>含义：查询人的钱数。</li>\n<li>处理：通过 PersonMap 访问对应的人获取其钱数。</li>\n<li>性能：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>\n<p>sim 操作：</p>\n<ul>\n<li>含义：对两个“存在认识链”的人发送消息，并计算最短路。</li>\n<li>处理：在并查集中查询是否可达，可达时使用堆优化 Dijkstra 算法计算最短路，并发送消息。</li>\n<li>性能：查询是否可达均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，Dijkstra 堆优化 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>e</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log{e})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span></span><span class=\"mclose\">)</span></span></span></span>，发送消息均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<p>关于其它做法的补充：</p>\n<ul>\n<li>SPFA：最坏复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>e</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(ne)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span></span></span></span>，在互测数据下因 CPU 时间限制宽松，即使针对了 SPFA 也不能卡超时，但强测数据范围可以卡掉朴素 SPFA，玄学优化的 SPFA 可能需要对着代码 Hack。</li>\n<li>朴素 Dijkstra：复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，在互测数据下因 CPU 时间限制宽松，对常数小的实现无法卡超时，但强测数据范围可以稳定卡掉朴素 Dijkstra。</li>\n<li>线段树优化 Dijkstra：复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span><span class=\"mclose\">)</span></span></span></span>，理论复杂度更优，但因为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>&lt;</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">e&lt;n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 这个差距并不明显。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于-jml-规格的测试方法与策略分析-3\"><a class=\"markdownIt-Anchor\" href=\"#基于-jml-规格的测试方法与策略分析-3\"></a> 基于 JML 规格的测试方法与策略分析</h3>\n<ul>\n<li>\n<p>正确性测试：</p>\n<ul>\n<li>相比于第二次作业变化不大，即不需要进行测试类型的调整，只需要增加第三组测试数据的网络修改指令集合，修改查询指令集合，同时额外对表情范围进行枚举即可。</li>\n</ul>\n</li>\n<li>\n<p>非正确性测试：</p>\n<ul>\n<li>向上包含第二次作业的全部非正确性测试。</li>\n<li>最短路压力测试：分别枚举 90%，前 60%，前 30%，用上述数量的指令构造以下种类的图：随机图，菊花图，树形图，SPFA 快乐图，接下来持续进行 sim 操作进行测试。</li>\n<li>表情删除压力测试：分别添加大量表情，持续执行 dce -1 即什么也没有删掉进行测试；分别添加大量表情与包含这些表情的消息，持续执行 dce -1 进行测试。</li>\n</ul>\n</li>\n<li>\n<p>测试强度评估：</p>\n<ul>\n<li>\n<p>采用打标签统计覆盖情况的方式进行评估，标签设置如下：</p>\n<pre class=\"highlight\"><code class=\"c++\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *s[] = &#123;\n    <span class=\"hljs-string\">&quot;equal person in add person&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add person&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal id in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal relation in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;push up group in add relation&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal id in query value&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in query value&quot;</span>,\n    <span class=\"hljs-string\">&quot;null relation in query value&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query value&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal id in compare name&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in compare name&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in compare name&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query people sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in query name rank&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query name rank&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal id in query is circle&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in query is circle&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query is circle&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query block sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal group in add group&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add group&quot;</span>,\n    <span class=\"hljs-string\">&quot;null group in add to group&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in add to group&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal person in add to group&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add to group&quot;</span>,\n    <span class=\"hljs-string\">&quot;more than 1111 in add to group&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query in query group sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;null group in query group people sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query group people sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;null group in query group value sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query group value sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;size zero in query group value sum&quot;</span>,\n    <span class=\"hljs-string\">&quot;null group in query group age mean&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query group age mean&quot;</span>,\n    <span class=\"hljs-string\">&quot;size zero in query group age mean&quot;</span>,\n    <span class=\"hljs-string\">&quot;null group in query group age var&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query group age var&quot;</span>,\n    <span class=\"hljs-string\">&quot;size zero in query group age var&quot;</span>,\n    <span class=\"hljs-string\">&quot;null group in delete from group&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in delete from group&quot;</span>,\n    <span class=\"hljs-string\">&quot;already delete in delete from group&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in delete from group&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal message in add message&quot;</span>,\n    <span class=\"hljs-string\">&quot;null emoji in add message&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal person in add message&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add red envelope message type 0&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add red envelope message type 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add notice message type 0&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add notice message type 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add emoji message type 0&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add emoji message type 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add normal message type 0&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in add normal message type 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send red envelope message type 0 from 0&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send red envelope message type 0 from 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send emoji message type 0 from 0&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send emoji message type 0 from 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send notice message type 0 from 0&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send notice message type 0 from 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send normal message type 0 from 0&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send normal message type 0 from 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;null message in send message&quot;</span>,\n    <span class=\"hljs-string\">&quot;null relation in send message&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in group in send message&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send red envelope message type 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;one person group in send red envelope message&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send emoji message type 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send notice message type 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in send normal message type 1&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in query social value&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query social value&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in query received messages&quot;</span>,\n    <span class=\"hljs-string\">&quot;more than 4 in query received messages&quot;</span>,\n    <span class=\"hljs-string\">&quot;less than 4 in query received messages&quot;</span>,\n    <span class=\"hljs-string\">&quot;empty in query received messages&quot;</span>,\n    <span class=\"hljs-string\">&quot;equal emoji in store emoji&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in store emoji&quot;</span>,\n    <span class=\"hljs-string\">&quot;null person in query money&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query money&quot;</span>,\n    <span class=\"hljs-string\">&quot;just zero in query money&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in query popularity&quot;</span>,\n    <span class=\"hljs-string\">&quot;null emoji in query popularity&quot;</span>,\n    <span class=\"hljs-string\">&quot;empty emoji in delete cold emoji&quot;</span>,\n    <span class=\"hljs-string\">&quot;no need delete emoji in delete cold emoji&quot;</span>,\n    <span class=\"hljs-string\">&quot;no need delete message in delete cold emoji&quot;</span>,\n    <span class=\"hljs-string\">&quot;succeed in delete cold emoji&quot;</span>,\n    <span class=\"hljs-string\">&quot;not in circle in send indirect message&quot;</span>,\n    <span class=\"hljs-string\">&quot;is linked in send indirect message&quot;</span>,\n    <span class=\"hljs-string\">&quot;not linked in send indirect message&quot;</span>,\n    <span class=\"hljs-string\">&quot;null message in send indirect message&quot;</span>,\n    <span class=\"hljs-string\">&quot;type 1 message in send indirect message&quot;</span>\n&#125;;\n</code></pre>\n</li>\n<li>\n<p>对测试数据进行分析，统计总触发次数和单点最多触发次数，得到的覆盖情况如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">equal person in add person : 1408178 with 5062 max\nsucceed in add person : 2213833 with 5451 max\nequal id in add relation : 7226 with 130 max\nnull person in add relation : 658932 with 2568 max\nequal relation in add relation : 112415 with 2233 max\nsucceed in add relation : 1725540 with 8312 max\npush up group in add relation : 23477 with 450 max\nequal id in query value : 1949 with 108 max\nnull person in query value : 255979 with 5073 max\nnull relation in query value : 79650 with 3528 max\nsucceed in query value : 27226 with 2796 max\nequal id in compare name : 1869 with 100 max\nnull person in compare name : 255600 with 5060 max\nsucceed in compare name : 106380 with 4848 max\nsucceed in query people sum : 411139 with 5664 max\nnull person in query name rank : 179654 with 333 max\nsucceed in query name rank : 95809 with 333 max\nequal id in query is circle : 1594 with 15 max\nnull person in query is circle : 198850 with 333 max\nsucceed in query is circle : 76666 with 333 max\nsucceed in query block sum : 361956 with 5114 max\nequal group in add group : 4143 with 9 max\nsucceed in add group : 9633 with 10 max\nnull group in add to group : 424338 with 1097 max\nnull person in add to group : 223808 with 732 max\nequal person in add to group : 26128 with 260 max\nsucceed in add to group : 160361 with 4444 max\nmore than 1111 in add to group : 1277 with 344 max\nsucceed in query in query group sum : 373598 with 5118 max\nnull group in query group people sum : 209354 with 5172 max\nsucceed in query group people sum : 212334 with 3426 max\nnull group in query group value sum : 216655 with 5166 max\nsucceed in query group value sum : 248148 with 7777 max\nsize zero in query group value sum : 78707 with 2949 max\nnull group in query group age mean : 217641 with 5138 max\nsucceed in query group age mean : 212158 with 7777 max\nsize zero in query group age mean : 71071 with 2509 max\nnull group in query group age var : 210667 with 5167 max\nsucceed in query group age var : 218761 with 7777 max\nsize zero in query group age var : 72935 with 2967 max\nnull group in delete from group : 423450 with 1077 max\nnull person in delete from group : 222462 with 753 max\nalready delete in delete from group : 127795 with 628 max\nsucceed in delete from group : 32581 with 3334 max\nequal message in add message : 205100 with 1332 max\nnull emoji in add message : 78624 with 339 max\nequal person in add message : 3366 with 22 max\nsucceed in add red envelope message type 0 : 238702 with 1383 max\nsucceed in add red envelope message type 1 : 41099 with 215 max\nsucceed in add notice message type 0 : 237988 with 1366 max\nsucceed in add notice message type 1 : 41196 with 180 max\nsucceed in add emoji message type 0 : 72762 with 4000 max\nsucceed in add emoji message type 1 : 12675 with 164 max\nsucceed in add normal message type 0 : 245850 with 4000 max\nsucceed in add normal message type 1 : 41247 with 198 max\nsucceed in send red envelope message type 0 from 0 : 2372 with 40 max\nsucceed in send red envelope message type 0 from 1 : 176261 with 1383 max\nsucceed in send emoji message type 0 from 0 : 506 with 30 max\nsucceed in send emoji message type 0 from 1 : 47177 with 528 max\nsucceed in send notice message type 0 from 0 : 2327 with 43 max\nsucceed in send notice message type 0 from 1 : 175459 with 1366 max\nsucceed in send normal message type 0 from 0 : 2310 with 61 max\nsucceed in send normal message type 0 from 1 : 175990 with 1361 max\nnull message in send message : 554349 with 455 max\nnull relation in send message : 34817 with 300 max\nnull person in group in send message : 46077 with 227 max\nsucceed in send red envelope message type 1 : 1401 with 31 max\none person group in send red envelope message : 5 with 1 max\nsucceed in send emoji message type 1 : 412 with 33 max\nsucceed in send notice message type 1 : 1347 with 30 max\nsucceed in send normal message type 1 : 1437 with 27 max\nnull person in query social value : 825942 with 5313 max\nsucceed in query social value : 454309 with 4696 max\nnull person in query received messages : 724948 with 5283 max\nmore than 4 in query received messages : 8222 with 917 max\nless than 4 in query received messages : 60231 with 2350 max\nempty in query received messages : 313342 with 4547 max\nequal emoji in store emoji : 363623 with 809 max\nsucceed in store emoji : 687967 with 8000 max\nnull person in query money : 724700 with 5315 max\nsucceed in query money : 62301 with 1593 max\njust zero in query money : 503518 with 4634 max\nsucceed in query popularity : 481140 with 4985 max\nnull emoji in query popularity : 810083 with 5376 max\nempty emoji in delete cold emoji : 107862 with 203 max\nno need delete emoji in delete cold emoji : 117388 with 8000 max\nno need delete message in delete cold emoji : 107387 with 172 max\nsucceed in delete cold emoji : 754 with 13 max\nnot in circle in send indirect message : 23833 with 263 max\nis linked in send indirect message : 8780 with 125 max\nnot linked in send indirect message : 566107 with 3988 max\nnull message in send indirect message : 561985 with 450 max\ntype 1 message in send indirect message : 50080 with 276 max\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"规格实现技巧总结\"><a class=\"markdownIt-Anchor\" href=\"#规格实现技巧总结\"></a> 规格实现技巧总结</h2>\n<ul>\n<li>\n<p>实现规格所采取的设计策略分析：</p>\n<ul>\n<li>通读规格（顺便格式化官方的让强迫症吐血的代码），对比当次规格与前一次规格的差异（第二三次作业）。</li>\n<li>对着规格实现并测试官方样例。</li>\n<li>重新阅读规格与数据限制，思考测试数据的构造，同时反思代码是否存在的问题。</li>\n<li>构造测试数据进行对拍测试。</li>\n</ul>\n</li>\n<li>\n<p>容器选择与使用经验概述：</p>\n<p>本部分内容较长，单独<a href=\"https://chenrt-ggx.github.io/blog/2db00ccb4ac9\">开一篇博客</a>。</p>\n</li>\n<li>\n<p>图模型构建与维护策略：</p>\n<ul>\n<li>额外维护三个数据结构，AVL 树，并查集，无向图，三个数据结构彼此独立以降低耦合。</li>\n<li>AVL 树：支持泛型，提供公开的构造方法，插入方法 insert 和查询排名方法 getRank。</li>\n<li>并查集：不支持泛型（从代码复用角度，实现泛型更好），提供公开的构造方法，查询连通块数量方法 size，添加结点方法 add，查询方法 query，链接方法 link。</li>\n<li>无向图：支持泛型，提供公开的构造方法，添加节点方法 addNode，添加边方法 link，计算最短路的 dijkstra 方法，计算最短路的 SPFA 方法（靶子）。</li>\n<li>理论上可以直接在 person 中维护左右儿子实现 AVL 树，维护父亲实现并查集，利用 AcquaintanceMap 计算最短路，且这样常数更小，笔者没有采用这种方式一方面是出于降低耦合考虑，另一方面 Java 常数都大成这样了这些常数加就加吧。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"本地测试方式简述\"><a class=\"markdownIt-Anchor\" href=\"#本地测试方式简述\"></a> 本地测试方式简述</h2>\n<ul>\n<li>\n<p>关于评测机的实现：</p>\n<p>使用 C++ 实现本地自动化黑箱测试，重构了评测机，采用面向对象实现以取得更好的扩展性。</p>\n<p>通过 Tester 类实现了批量测试逻辑，如下：</p>\n<pre class=\"highlight\"><code class=\"c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Tester</span> &#123;\n<span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">detectTotal</span><span class=\"hljs-params\">()</span> </span>&#123;&#125; <span class=\"hljs-comment\">// 探测测试点数量</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">singleRun</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;   <span class=\"hljs-comment\">// 阻塞测试，用于 Debug</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">allRun</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;      <span class=\"hljs-comment\">// 批量测试，用于找 Bug</span>\n\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-built_in\">Tester</span>(<span class=\"hljs-type\">bool</span> type, <span class=\"hljs-type\">char</span> *testerName) &#123;&#125;                                         <span class=\"hljs-comment\">// 构造</span>\n    ~<span class=\"hljs-built_in\">Tester</span>() &#123;&#125;                                                                   <span class=\"hljs-comment\">// 析构</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setLimit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> climit, <span class=\"hljs-type\">double</span> cdanger, <span class=\"hljs-type\">double</span> rlimit, <span class=\"hljs-type\">double</span> rdanger)</span> </span>&#123;&#125; <span class=\"hljs-comment\">// 指定时间限制</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;                                                                  <span class=\"hljs-comment\">// 执行</span>\n&#125;;\n</code></pre>\n<p>通过 Runner 类对单个测试点进行测试，如下：</p>\n<pre class=\"highlight\"><code class=\"c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Runner</span> &#123;\n<span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-function\">Info <span class=\"hljs-title\">useClock</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;         <span class=\"hljs-comment\">// 用于 Windows 下计时，仅支持计算运行时间</span>\n    <span class=\"hljs-function\">Info <span class=\"hljs-title\">useTime</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> limit)</span> </span>&#123;&#125; <span class=\"hljs-comment\">// 用于 Linux 下计时，支持计算 CPU 和运行时间</span>\n\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-built_in\">Runner</span>(<span class=\"hljs-type\">int</span> id, <span class=\"hljs-type\">char</span> *cmd) &#123;&#125; <span class=\"hljs-comment\">// 构造</span>\n    <span class=\"hljs-function\">Info <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> limit)</span> </span>&#123;&#125;       <span class=\"hljs-comment\">// 执行</span>\n&#125;;\n</code></pre>\n<p>返回一个 Info 类的对象，描述测试结果，如下：</p>\n<pre class=\"highlight\"><code class=\"c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Info</span> &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-built_in\">Info</span>(<span class=\"hljs-type\">int</span> id, <span class=\"hljs-type\">double</span> ct, <span class=\"hljs-type\">double</span> rt) &#123;&#125;                            <span class=\"hljs-comment\">// 构造</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">pushUp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> climit, <span class=\"hljs-type\">int</span> cdanger, <span class=\"hljs-type\">int</span> rlimit, <span class=\"hljs-type\">int</span> rdanger)</span> </span>&#123;&#125; <span class=\"hljs-comment\">// 更新时间评判标准</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">toScreen</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;                                               <span class=\"hljs-comment\">// 屏幕输出结果</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">toFile</span><span class=\"hljs-params\">(FILE *out)</span> </span>&#123;&#125;                                        <span class=\"hljs-comment\">// 文件输出结果</span>\n&#125;;\n</code></pre>\n</li>\n<li>\n<p>数据构造的一些技巧：</p>\n<p>利用函数指针数组，避免大量的 if 或 switch，优雅的生成测试数据，例如定义以下函数指针数组，通过一个 vector 存储自己需要随机的指令集，每次在 vector 中随机需要的下标并通过函数指针访问即可：</p>\n<pre class=\"highlight\"><code class=\"c++\"><span class=\"hljs-built_in\">void</span> (JmlFucker::*fun[<span class=\"hljs-number\">28</span>])() = &#123;\n    &amp;JmlFucker::sp_ap,\n    &amp;JmlFucker::sp_ar,\n    &amp;JmlFucker::sp_qv,\n    &amp;JmlFucker::sp_cn,\n    &amp;JmlFucker::sp_qnr,\n    &amp;JmlFucker::sp_qbs,\n    &amp;JmlFucker::sp_qci,\n    &amp;JmlFucker::sp_qgs,\n    &amp;JmlFucker::sp_ag,\n    &amp;JmlFucker::sp_atg,\n    &amp;JmlFucker::sp_qps,\n    &amp;JmlFucker::sp_qgps,\n    &amp;JmlFucker::sp_qgvs,\n    &amp;JmlFucker::sp_qgam,\n    &amp;JmlFucker::sp_qgav,\n    &amp;JmlFucker::sp_dfg,\n    &amp;JmlFucker::sp_am,\n    &amp;JmlFucker::sp_sm,\n    &amp;JmlFucker::sp_qsv,\n    &amp;JmlFucker::sp_qrm,\n    &amp;JmlFucker::sp_arem,\n    &amp;JmlFucker::sp_anm,\n    &amp;JmlFucker::sp_aem,\n    &amp;JmlFucker::sp_sei,\n    &amp;JmlFucker::sp_qp,\n    &amp;JmlFucker::sp_dce,\n    &amp;JmlFucker::sp_qm,\n    &amp;JmlFucker::sp_sim\n&#125;;\n</code></pre>\n<p>通过 fwrite 优化数据生成器性能，快速产生大量测试数据，以 ap 指令为例，写 output 数组的部分函数如下（可将 IO 优化封装成一类，对外提供访问接口，以便数据生成器的扩展与维护）：</p>\n<pre class=\"highlight\"><code class=\"c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (x &gt; <span class=\"hljs-number\">9</span>)\n        <span class=\"hljs-built_in\">solve</span>(x / <span class=\"hljs-number\">10</span>);\n    output[end++] = x % <span class=\"hljs-number\">10</span> ^ <span class=\"hljs-string\">&#x27;0&#x27;</span>;\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">digit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>)\n        output[end++] = <span class=\"hljs-string\">&#x27;-&#x27;</span>, x = -x;\n    <span class=\"hljs-built_in\">solve</span>(x);\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">str</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> </span>&#123;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; s[i]; i++)\n        output[end++] = s[i];\n&#125;\n\n<span class=\"hljs-comment\">// add_person id(int) name(String) age(int)</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id, <span class=\"hljs-type\">char</span> *name, <span class=\"hljs-type\">int</span> age)</span> </span>&#123;\n    output[end++] = <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n    output[end++] = <span class=\"hljs-string\">&#x27;p&#x27;</span>;\n    output[end++] = <span class=\"hljs-string\">&#x27; &#x27;</span>;\n    <span class=\"hljs-built_in\">digit</span>(id);\n    output[end++] = <span class=\"hljs-string\">&#x27; &#x27;</span>;\n    <span class=\"hljs-built_in\">str</span>(name);\n    output[end++] = <span class=\"hljs-string\">&#x27; &#x27;</span>;\n    <span class=\"hljs-built_in\">digit</span>(age);\n    output[end++] = <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;\n&#125;\n</code></pre>\n<p>此外，Python 有 cyaron 库，支持生成给定特征的图/树或其它测试用例，可用于本单元测试数据的构造。</p>\n</li>\n</ul>\n<h2 id=\"程序-bug-分析\"><a class=\"markdownIt-Anchor\" href=\"#程序-bug-分析\"></a> 程序 Bug 分析</h2>\n<ul>\n<li>\n<p>本人程序 Bug：</p>\n<ul>\n<li>第一次作业发现平衡树板子维护平衡时双旋转写锅了，会出 Null Pointer Exception，随便一组随机数据就发现了。</li>\n<li>第二次作业算完年龄均值忘记除 n，对拍时被发现。</li>\n<li>第二次作业从组对象里删除人时，忘记从人对象里删除他所在的组，对拍时被发现。</li>\n<li>第三次作业手残写混了一处 MessageId 和 EmojiId，测官方样例时发现。</li>\n<li>本地测试还算充分，在三次强测和互测中均没有被发现 Bug。</li>\n</ul>\n<p>此外，评测机出现一个重大 Bug，具体说明如下：</p>\n<ul>\n<li>评测时，分别打开两份程序的输出，按行比较，比较结束后，应关闭打开的两个文件，然而手滑只关了一个。</li>\n<li>被打开的文件越来越多，最后达到了 C++ 的 512 文件上限。</li>\n<li>随后打开的文件都是 NULL，两个 NULL 当然相同，于是得到答案一致的结果。</li>\n<li>补充关闭文件即可解决这一问题，此外可通过在 fopen 后 assert 来避免类似问题再次发生。</li>\n</ul>\n</li>\n<li>\n<p>他人程序 Bug：</p>\n<ul>\n<li>\n<p>第一次作业：</p>\n<p>一起对拍的兄弟并查集无法处理负数 id，当时的数据没有这个情况（没想到这个地方会有人出错），没测出来，互测发现一人两个 Bug，如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">person1: 000 WA\nperson2: 000 WA\nperson3: 100 WA // qbs is 1 when empty, tle as well\nperson4: 000 WA\nperson5: 000 WA\nperson6: 000 WA\nperson7: 000 WA\nperson8: 000 WA\n</code></pre>\n</li>\n<li>\n<p>第二次作业：</p>\n<p>一起对拍的兄弟不少存在精度问题或性能问题，均被发现，此外因为本地测试 1111 的测试点编号靠后，因上述评测机 Bug 误判没有区别，互测发现一人一个 Bug，如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">person1: 000 WA\nperson2: 000 WA\nperson3: 000 WA\nperson4: 000 WA\nperson5: 000 WA\nperson6: 000 WA\nperson7: 000 WA\nperson8: 000 WA // tle in qgvs\n</code></pre>\n</li>\n<li>\n<p>第三次作业：</p>\n<p>一起对拍的兄弟分别出现 dijkstra 写锅，维护钱数写锅，删除表情导致的诡异 Bug 等，均被测出。</p>\n<p>诡异 Bug 是指，添加表情 A，添加使用表情 A 的表情消息，发送消息，添加一个相同 id 的使用不同于表情 A 的表情 B 的表情消息，通过控制热度删除表情 A 而不删除表情 B，此时这条消息会被误删。</p>\n<p>互测时自动化测试没有发现任何 Bug，不甘心读代码依旧没有发现任何 Bug，如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">person1: 000 WA\nperson2: 000 WA\nperson3: 000 WA\nperson4: 000 WA\nperson5: 000 WA\nperson6: 000 WA\nperson7: 000 WA\nperson8: 000 WA\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"心得体会\"><a class=\"markdownIt-Anchor\" href=\"#心得体会\"></a> 心得体会</h2>\n<p>这一单元题目本身比较水，前两单元因为优化的原因用于测试的时间和用于实现的时间大致相当，本单元用于测试的时间是用于实现的时间的数倍。</p>\n<p>个人认为第一单元测试的重点在于对构造数据时对 WF 的全面考虑和针对优化可能出现的错误，第二单元的测试重点在于实现定时投喂输入并发评测与 SPJ，本单元的测试重点在于在接口较多且接口间可能产生影响的情况下，对测试功能和性能的指令序列的设计，从这个角度来讲本单元也有一些可圈可点之处。</p>\n<p>或许可以考虑后两单元体验一下 C++ 的“手动挡”面向对象，对比一下 Java 和 C++ 在面向对象上的差异，<s>顺便用平板电视快乐秒 qnr</s>，以及朴素的最短路似乎不够刺激，不如来点负权边再来点判负环，或者来点最小生成树换换口味（逃）。</p>\n<p>曾经立志：每次都刀人，每次不被人刀，只有我发现别人没发现的 Bug，没有别人发现我没发现的 Bug。只考虑自己的互测屋的话，第一个 Flag 倒了，考虑一起测试兄弟的互测屋的话，除第二个 Flag 外都倒了，多少有些遗憾。最终战绩，发刀 53，命中 45，蒟蒻没刀够，蒟蒻还想刀更多的人 QAQ。</p>\n","length":"9.3k","time":"40min","categories":["Buaa","OO"],"tags":["Java","C++"]}