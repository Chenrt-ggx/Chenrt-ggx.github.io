{"id":"496bdeefbc6e","title":"网络攻防技术实验作业 | 编程开发篇","created":"2022-05-28T13:14:30.000Z","updated":"2022-05-28T13:14:30.000Z","raw":"<p>[迁移自博客园] | BUAA Web Attack and Defense 2022 Programming</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>所以 Nmap 是怎么区分出 filtered 和 closed 的，我好菜 QAQ。</p>\n</blockquote>\n<h2 id=\"基于-tcp-全连接的端口扫描\"><a class=\"markdownIt-Anchor\" href=\"#基于-tcp-全连接的端口扫描\"></a> 基于 TCP 全连接的端口扫描</h2>\n<h3 id=\"实验环境\"><a class=\"markdownIt-Anchor\" href=\"#实验环境\"></a> 实验环境</h3>\n<p>在 Windows10 本地开发与测试。</p>\n<h3 id=\"实现原型函数\"><a class=\"markdownIt-Anchor\" href=\"#实现原型函数\"></a> 实现原型函数</h3>\n<p>原型函数如下所示：</p>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">import</span> socket\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:\n    soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    soc.connect((<span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"hljs-number\">8080</span>))\n    soc.close()\n</code></pre>\n<p>分别测试本地开放的端口，本地未开放的端口，远端开放的端口，远端未开放的端口，结果如下：</p>\n<ul>\n<li>本地开放的端口，结果为直接退出。</li>\n<li>本地未开放的端口，结果为出现异常，异常为 <code>ConnectionRefusedError</code>。</li>\n<li>远端开放的端口，结果为直接退出。</li>\n<li>远端未开放的端口，结果为出现异常，异常为 <code>socket.timeout</code>。</li>\n</ul>\n<h3 id=\"实现完整的端口扫描程序\"><a class=\"markdownIt-Anchor\" href=\"#实现完整的端口扫描程序\"></a> 实现完整的端口扫描程序</h3>\n<p>基于原型函数，可以实现检查单个端口是否开放的函数，其中 timeout 为超时阈值：</p>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">port</span>):\n    <span class=\"hljs-keyword\">try</span>:\n        soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        soc.settimeout(timeout)\n        soc.connect((host, port))\n        soc.close()\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">except</span> ConnectionRefusedError:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">except</span> socket.timeout:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n</code></pre>\n<p>考虑到对于单个远端端口，若此端口没有开放则需要等待直到连接超时，这个过程为秒级；主机的 65535 个端口中大多数没有开放，因此大多数情况下将进行秒级等待，为提高程序性能，采用多线程加速：</p>\n<pre class=\"highlight\"><code class=\"python\">open_list = []\ntodo_list = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(offset, <span class=\"hljs-built_in\">min</span>(offset + limit, <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">16</span>))]\nopen_mutex, todo_mutex = threading.Lock(), threading.Lock()\n</code></pre>\n<p>工作线程从 <code>todo_list</code> 中取出待测试端口，测试其是否开放，若开放则加入 <code>open_list</code>，直到 <code>todo_list</code> 为空时终止，操作两个列表的过程中可能存在线程安全问题，因此需要加锁：</p>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">worker</span>():\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        todo_mutex.acquire()\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(todo_list) == <span class=\"hljs-number\">0</span>:\n            todo_mutex.release()\n            <span class=\"hljs-keyword\">return</span>\n        item = todo_list.pop()\n        todo_mutex.release()\n        <span class=\"hljs-keyword\">if</span> check(item):\n            open_mutex.acquire()\n            open_list.append(item)\n            open_mutex.release()\n</code></pre>\n<p>接下来只需要创建若干线程并全部启动，再等待这些线程全部终止即可，此时的 <code>open_list</code> 即为所求：</p>\n<pre class=\"highlight\"><code class=\"python\">thread_list = [threading.Thread(target=worker, args=()) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">min</span>(threads, limit))]\ntimestamp_print(<span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">len</span>(thread_list)) + <span class=\"hljs-string\">&#x27; threads created&#x27;</span>)\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> thread_list:\n    i.start()\ntimestamp_print(<span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">len</span>(thread_list)) + <span class=\"hljs-string\">&#x27; threads started&#x27;</span>)\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> thread_list:\n    i.join()\nopen_list.sort()\ntimestamp_print(<span class=\"hljs-string\">&#x27;scan finished, result is: &#x27;</span> + <span class=\"hljs-built_in\">str</span>(open_list))\n<span class=\"hljs-keyword\">return</span> open_list\n</code></pre>\n<p>完整代码如下所示：</p>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">import</span> socket\n<span class=\"hljs-keyword\">import</span> datetime\n<span class=\"hljs-keyword\">import</span> threading\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">timestamp_print</span>(<span class=\"hljs-params\">text</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">str</span>(datetime.datetime.now()).split(<span class=\"hljs-string\">&#x27;.&#x27;</span>)[<span class=\"hljs-number\">0</span>], text, sep=<span class=\"hljs-string\">&#x27;: &#x27;</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">scan</span>(<span class=\"hljs-params\">host, limit, offset=<span class=\"hljs-number\">1</span>, timeout=<span class=\"hljs-number\">3</span>, threads=<span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">12</span></span>):\n    open_list = []\n    todo_list = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(offset, <span class=\"hljs-built_in\">min</span>(offset + limit, <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">16</span>))]\n    open_mutex, todo_mutex = threading.Lock(), threading.Lock()\n    timestamp_print(<span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">len</span>(todo_list)) + <span class=\"hljs-string\">&#x27; tasks created&#x27;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">port</span>):\n        <span class=\"hljs-keyword\">try</span>:\n            soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            soc.settimeout(timeout)\n            soc.connect((host, port))\n            soc.close()\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n        <span class=\"hljs-keyword\">except</span> ConnectionRefusedError:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n        <span class=\"hljs-keyword\">except</span> socket.timeout:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">worker</span>():\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n            todo_mutex.acquire()\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(todo_list) == <span class=\"hljs-number\">0</span>:\n                todo_mutex.release()\n                <span class=\"hljs-keyword\">return</span>\n            item = todo_list.pop()\n            todo_mutex.release()\n            <span class=\"hljs-keyword\">if</span> check(item):\n                open_mutex.acquire()\n                open_list.append(item)\n                open_mutex.release()\n\n    thread_list = [threading.Thread(target=worker, args=()) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">min</span>(threads, limit))]\n    timestamp_print(<span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">len</span>(thread_list)) + <span class=\"hljs-string\">&#x27; threads created&#x27;</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> thread_list:\n        i.start()\n    timestamp_print(<span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">len</span>(thread_list)) + <span class=\"hljs-string\">&#x27; threads started&#x27;</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> thread_list:\n        i.join()\n    open_list.sort()\n    timestamp_print(<span class=\"hljs-string\">&#x27;scan finished, result is: &#x27;</span> + <span class=\"hljs-built_in\">str</span>(open_list))\n    <span class=\"hljs-keyword\">return</span> open_list\n</code></pre>\n<h3 id=\"测试端口扫描程序\"><a class=\"markdownIt-Anchor\" href=\"#测试端口扫描程序\"></a> 测试端口扫描程序</h3>\n<p>采用两个不同的防火墙配置进行测试，如下所示：</p>\n<img src=\"/assets/images/buaa-security/dev/config-1.jpg\" />\n<p>在服务器内使用 Nmap 工具扫描，结果如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">[root@CRISIS ~]# nmap 127.0.0.1\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-17 20:28 CST\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.0000030s latency).\nNot shown: 996 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n6000/tcp open  X11\n7000/tcp open  afs3-fileserver\n\nNmap done: 1 IP address (1 host up) scanned in 0.08 seconds\n</code></pre>\n<p>在本地使用 Nmap 工具扫描，结果如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">[chenrt@CRISIS ~]$ nmap xxx.xxx.xxx.xxx\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-17 20:29 CST\nNote: Host seems down. If it is really up, but blocking our ping probes, try -Pn\nNmap done: 1 IP address (0 hosts up) scanned in 3.06 seconds\n</code></pre>\n<p>直接扫描失败，添加 -Pn 选项扫描后结果如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">[chenrt@CRISIS ~]$ nmap xxx.xxx.xxx.xxx -Pn\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-17 20:29 CST\nNmap scan report for xxx.xxx.xxx.xxx\nHost is up (0.0077s latency).\nNot shown: 996 filtered tcp ports (no-response)\nPORT     STATE  SERVICE\n22/tcp   open   ssh\n3389/tcp closed ms-wbt-server\n6000/tcp open   X11\n7000/tcp open   afs3-fileserver\n\nNmap done: 1 IP address (1 host up) scanned in 6.41 seconds\n</code></pre>\n<p>使用上述端口扫描程序扫描的结果如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">2022-05-17 20:33:06: 65535 tasks created\n2022-05-17 20:33:06: 4096 threads created\n2022-05-17 20:33:06: 4096 threads started\n2022-05-17 20:33:55: scan finished, result is: [22, 6000, 7000]\n</code></pre>\n<p>调整防火墙配置，开放 80 端口，如下所示：</p>\n<img src=\"/assets/images/buaa-security/dev/config-2.jpg\" />\n<p>在服务器内使用 Nmap 工具扫描，结果如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">[root@CRISIS ~]# nmap 127.0.0.1\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-17 20:36 CST\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.0000030s latency).\nNot shown: 996 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n6000/tcp open  X11\n7000/tcp open  afs3-fileserver\n\nNmap done: 1 IP address (1 host up) scanned in 0.09 seconds\n</code></pre>\n<p>在本地使用 Nmap 工具扫描，结果如下，可见 Nmap 工具似乎会特别关照 80 端口，未开放此端口则需要使用 -Pn 扫描：</p>\n<pre class=\"highlight\"><code class=\"plain\">[chenrt@CRISIS ~]$ nmap xxx.xxx.xxx.xxx -Pn\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-17 20:36 CST\nNmap scan report for xxx.xxx.xxx.xxx\nHost is up (0.0072s latency).\nNot shown: 995 filtered tcp ports (no-response)\nPORT     STATE  SERVICE\n22/tcp   open   ssh\n80/tcp   open   http\n3389/tcp closed ms-wbt-server\n6000/tcp open   X11\n7000/tcp open   afs3-fileserver\n\nNmap done: 1 IP address (1 host up) scanned in 5.12 seconds\n</code></pre>\n<p>使用上述端口扫描程序扫描的结果如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">2022-05-17 20:38:20: 65535 tasks created\n2022-05-17 20:38:20: 4096 threads created\n2022-05-17 20:38:21: 4096 threads started\n2022-05-17 20:39:09: scan finished, result is: [22, 80, 6000, 7000]\n</code></pre>\n<h2 id=\"验证码识别\"><a class=\"markdownIt-Anchor\" href=\"#验证码识别\"></a> 验证码识别</h2>\n<h3 id=\"实验环境-2\"><a class=\"markdownIt-Anchor\" href=\"#实验环境-2\"></a> 实验环境</h3>\n<p>在 Windows10 本地开发与测试。</p>\n<h3 id=\"登录过程分析\"><a class=\"markdownIt-Anchor\" href=\"#登录过程分析\"></a> 登录过程分析</h3>\n<p>抓包结果如下所示，可以发现登录操作是一个向 <a href=\"https://m.bjyouth.net/site/login\">https://m.bjyouth.net/site/login</a> 的 post 请求：</p>\n<img src=\"/assets/images/buaa-security/dev/req-1.jpg\" width=\"85%\" />\n<p>登录请求的详细内容如下所示，可以发现有四个字段，下面分别分析：</p>\n<ul>\n<li><code>Login[verifyCode]</code> 字段：显然是明文传输的验证码。</li>\n<li><code>_csrf_mobile</code> 字段：显然是用来防御跨站攻击的 csrf token，在 Cookies 里面一找就有。</li>\n<li><code>Login[username]</code> 和 <code>Login[password]</code> 字段：显然是用户名和密码，但不是明文传输。</li>\n</ul>\n<img src=\"/assets/images/buaa-security/dev/req-2.jpg\" width=\"85%\" />\n<p>下面分析 <code>Login[username]</code> 和 <code>Login[password]</code> 字段的编码方式，过程如下：</p>\n<ul>\n<li>根据两个字段内容的字符集和以等号结尾，推断两个字段最后经过一次 base64 编码。由于两个 base64 编码长度相同，编码前内容的长度也应该相同，因此这两个字段不是用户名和密码的直接编码。</li>\n<li>注意到两个编码的长度都是 172，base64 编码前的长度就是 128，熟知这是 RSA 的块长度。由此猜测 <code>Login[username]</code> 和 <code>Login[password]</code> 字段是用户名和密码经过 RSA 加密和 base64 编码得到的，挺多网站都这么干。</li>\n<li>在网页源码里搜索关键字 key，结果如下，可见不但没有混淆还有详细的注释，编写这个页面的程序员相当贴心，即使没有上面的分析也知道 <code>Login[username]</code> 和 <code>Login[password]</code> 字段是咋得到的了。</li>\n<li>最后使用源码中的公钥加密自己的用户名和密码，经验证和请求中抓取到的一致。</li>\n</ul>\n<img src=\"/assets/images/buaa-security/dev/req-3.jpg\" width=\"85%\" />\n<h3 id=\"登录验证码识别\"><a class=\"markdownIt-Anchor\" href=\"#登录验证码识别\"></a> 登录验证码识别</h3>\n<p>经过上述分析，唯一需要解决的就是验证码识别，验证码的形式如下：</p>\n<img src=\"/assets/images/buaa-security/dev/code.png\" width=\"30%\" />\n<p>可见虽然存在噪声，但噪声大多是点的形式而不是线的形式；虽然各个字符字号不完全一致且存在旋转，但并没有强烈的扭曲与变形等处理，考虑通过 <a href=\"https://github.com/sml2h3/ddddocr\">ddddocr 库</a>完成验证码识别：</p>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">do_ocr</span>(<span class=\"hljs-params\">data</span>):\n    <span class=\"hljs-keyword\">return</span> DdddOcr().classification(data)\n</code></pre>\n<p>上述代码可以正常执行，且有一定成功率，但仍可以通过降噪的方式进行优化，具体而言，对于每一个像素，如果其周边像素中，白色的占比超过阈值，就将这一像素设为白色，如此迭代多次：</p>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">de_noise</span>(<span class=\"hljs-params\">img, white, limit=<span class=\"hljs-number\">0.75</span>, total=<span class=\"hljs-number\">5</span></span>):\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(total):\n        <span class=\"hljs-keyword\">for</span> i, j <span class=\"hljs-keyword\">in</span> matrix_for_each(<span class=\"hljs-built_in\">range</span>(img.width), <span class=\"hljs-built_in\">range</span>(img.height)):\n            px = img.getpixel((i, j))\n            <span class=\"hljs-keyword\">if</span> px == white:\n                <span class=\"hljs-keyword\">continue</span>\n            count, select = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">for</span> x, y <span class=\"hljs-keyword\">in</span> matrix_for_each([-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], [-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]):\n                ni, nj = i + x, j + y\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= ni &lt; img.width <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= nj &lt; img.height:\n                    count += <span class=\"hljs-number\">1</span>\n                    <span class=\"hljs-keyword\">if</span> img.getpixel((ni, nj)) == white:\n                        select += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> select / count &gt; limit:\n                img.putpixel((i, j), white)\n    <span class=\"hljs-keyword\">return</span> img\n</code></pre>\n<p>经过降噪的图片如下，对比可见，噪点大幅减少：</p>\n<img src=\"/assets/images/buaa-security/dev/fixed.png\" width=\"30%\" />\n<p>此时 <code>do_ocr</code> 函数改为：</p>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">do_ocr</span>(<span class=\"hljs-params\">data</span>):\n    buf = io.BytesIO()\n    de_noise(Image.<span class=\"hljs-built_in\">open</span>(io.BytesIO(data)), (<span class=\"hljs-number\">250</span>, <span class=\"hljs-number\">250</span>, <span class=\"hljs-number\">250</span>)).save(buf, <span class=\"hljs-built_in\">format</span>=<span class=\"hljs-string\">&#x27;PNG&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> DdddOcr().classification(buf.getvalue())\n</code></pre>\n<p>完整代码如下：</p>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">import</span> io\n<span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> Image\n<span class=\"hljs-keyword\">from</span> ddddocr <span class=\"hljs-keyword\">import</span> DdddOcr\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">matrix_for_each</span>(<span class=\"hljs-params\">x, y</span>):\n    result = []\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> x:\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> y:\n            result.append((i, j))\n    <span class=\"hljs-keyword\">return</span> result\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">de_noise</span>(<span class=\"hljs-params\">img, white, limit=<span class=\"hljs-number\">0.75</span>, total=<span class=\"hljs-number\">5</span></span>):\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(total):\n        <span class=\"hljs-keyword\">for</span> i, j <span class=\"hljs-keyword\">in</span> matrix_for_each(<span class=\"hljs-built_in\">range</span>(img.width), <span class=\"hljs-built_in\">range</span>(img.height)):\n            px = img.getpixel((i, j))\n            <span class=\"hljs-keyword\">if</span> px == white:\n                <span class=\"hljs-keyword\">continue</span>\n            count, select = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">for</span> x, y <span class=\"hljs-keyword\">in</span> matrix_for_each([-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], [-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]):\n                ni, nj = i + x, j + y\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= ni &lt; img.width <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= nj &lt; img.height:\n                    count += <span class=\"hljs-number\">1</span>\n                    <span class=\"hljs-keyword\">if</span> img.getpixel((ni, nj)) == white:\n                        select += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> select / count &gt; limit:\n                img.putpixel((i, j), white)\n    <span class=\"hljs-keyword\">return</span> img\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">do_ocr</span>(<span class=\"hljs-params\">data</span>):\n    buf = io.BytesIO()\n    de_noise(Image.<span class=\"hljs-built_in\">open</span>(io.BytesIO(data)), (<span class=\"hljs-number\">250</span>, <span class=\"hljs-number\">250</span>, <span class=\"hljs-number\">250</span>)).save(buf, <span class=\"hljs-built_in\">format</span>=<span class=\"hljs-string\">&#x27;PNG&#x27;</span>)\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;fixed.png&#x27;</span>, <span class=\"hljs-string\">&#x27;wb&#x27;</span>) <span class=\"hljs-keyword\">as</span> file:\n        file.write(buf.getvalue())\n    <span class=\"hljs-keyword\">return</span> DdddOcr().classification(buf.getvalue())\n</code></pre>\n<h3 id=\"登录脚本实现\"><a class=\"markdownIt-Anchor\" href=\"#登录脚本实现\"></a> 登录脚本实现</h3>\n<p>实现获取 RSA 公钥：</p>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_utils</span>():\n    request = requests.get(url=<span class=\"hljs-string\">&#x27;https://m.bjyouth.net/site/login&#x27;</span>)\n    pubkey = <span class=\"hljs-string\">&#x27;\\n&#x27;</span>.join([i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> re.findall(<span class=\"hljs-string\">&#x27;pubkey \\\\+?= \\&#x27;(.*?)\\&#x27;&#x27;</span>, request.text)])\n    rsa_key = rsa.PublicKey.load_pkcs1_openssl_pem(pubkey.encode())\n    <span class=\"hljs-keyword\">return</span> rsa_key\n</code></pre>\n<p>实现获取验证码并识别：</p>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_code</span>(<span class=\"hljs-params\">session</span>):\n    request = session.get(url=<span class=\"hljs-string\">&#x27;https://m.bjyouth.net/site/login&#x27;</span>)\n    csrf_token = requests.utils.dict_from_cookiejar(request.cookies)[<span class=\"hljs-string\">&#x27;_csrf_mobile&#x27;</span>]\n    <span class=\"hljs-keyword\">match</span> = re.search(<span class=\"hljs-string\">&#x27;src=\\&quot;(/site/captcha.+)\\&quot; alt=\\&quot;验证码\\&quot;&#x27;</span>, request.text)\n    request = session.get(<span class=\"hljs-string\">&#x27;https://m.bjyouth.net&#x27;</span> + <span class=\"hljs-keyword\">match</span>.group(<span class=\"hljs-number\">1</span>))\n    <span class=\"hljs-keyword\">return</span> csrf_token, do_ocr(request.content)\n</code></pre>\n<p>实现登录过程：</p>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-params\">username, password</span>):\n    rsa_key = get_utils()\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        session = requests.session()\n        session.timeout = <span class=\"hljs-number\">5</span>\n        session.headers.update(&#123;\n            <span class=\"hljs-string\">&#x27;User-Agent&#x27;</span>: <span class=\"hljs-string\">&#x27;Y.J.Aickson&#x27;</span>\n        &#125;)\n        csrf_token, code = get_code(session)\n        request = session.post(<span class=\"hljs-string\">&#x27;https://m.bjyouth.net/site/login&#x27;</span>, data=&#123;\n            <span class=\"hljs-string\">&#x27;_csrf_mobile&#x27;</span>: csrf_token,\n            <span class=\"hljs-string\">&#x27;Login[username]&#x27;</span>: base64.b64encode(rsa.encrypt(username.encode(), rsa_key)).decode(),\n            <span class=\"hljs-string\">&#x27;Login[password]&#x27;</span>: base64.b64encode(rsa.encrypt(password.encode(), rsa_key)).decode(),\n            <span class=\"hljs-string\">&#x27;Login[verifyCode]&#x27;</span>: code\n        &#125;)\n        <span class=\"hljs-keyword\">if</span> request.text == <span class=\"hljs-string\">&#x27;8&#x27;</span>:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;识别的验证码错误，重试中&#x27;</span>)\n            <span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;fail&#x27;</span> <span class=\"hljs-keyword\">in</span> request.text:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;登录失败&#x27;</span>)\n            exit(<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> session\n</code></pre>\n<p>完整代码如下：</p>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-keyword\">import</span> rsa\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> base64\n<span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">import</span> requests.utils\n<span class=\"hljs-keyword\">from</span> image_tools <span class=\"hljs-keyword\">import</span> do_ocr\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_user_info</span>(<span class=\"hljs-params\">aim</span>):\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;./login/config.json&#x27;</span>, <span class=\"hljs-string\">&#x27;r&#x27;</span>) <span class=\"hljs-keyword\">as</span> file:\n        config = json.loads(file.read())\n    <span class=\"hljs-keyword\">if</span> config.get(aim + <span class=\"hljs-string\">&#x27;_&#x27;</span> + <span class=\"hljs-string\">&#x27;username&#x27;</span>) <span class=\"hljs-keyword\">and</span> config.get(aim + <span class=\"hljs-string\">&#x27;_&#x27;</span> + <span class=\"hljs-string\">&#x27;password&#x27;</span>):\n        username = base64.b64decode(config[aim + <span class=\"hljs-string\">&#x27;_&#x27;</span> + <span class=\"hljs-string\">&#x27;username&#x27;</span>].encode()).decode()\n        password = base64.b64decode(config[aim + <span class=\"hljs-string\">&#x27;_&#x27;</span> + <span class=\"hljs-string\">&#x27;password&#x27;</span>].encode()).decode()\n        <span class=\"hljs-keyword\">return</span> username, password\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;get username or password failed&#x27;</span>)\n        exit(<span class=\"hljs-number\">0</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_utils</span>():\n    request = requests.get(url=<span class=\"hljs-string\">&#x27;https://m.bjyouth.net/site/login&#x27;</span>)\n    pubkey = <span class=\"hljs-string\">&#x27;\\n&#x27;</span>.join([i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> re.findall(<span class=\"hljs-string\">&#x27;pubkey \\\\+?= \\&#x27;(.*?)\\&#x27;&#x27;</span>, request.text)])\n    rsa_key = rsa.PublicKey.load_pkcs1_openssl_pem(pubkey.encode())\n    <span class=\"hljs-keyword\">return</span> rsa_key\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_code</span>(<span class=\"hljs-params\">session</span>):\n    request = session.get(url=<span class=\"hljs-string\">&#x27;https://m.bjyouth.net/site/login&#x27;</span>)\n    csrf_token = requests.utils.dict_from_cookiejar(request.cookies)[<span class=\"hljs-string\">&#x27;_csrf_mobile&#x27;</span>]\n    <span class=\"hljs-keyword\">match</span> = re.search(<span class=\"hljs-string\">&#x27;src=\\&quot;(/site/captcha.+)\\&quot; alt=\\&quot;验证码\\&quot;&#x27;</span>, request.text)\n    request = session.get(<span class=\"hljs-string\">&#x27;https://m.bjyouth.net&#x27;</span> + <span class=\"hljs-keyword\">match</span>.group(<span class=\"hljs-number\">1</span>))\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;code.png&#x27;</span>, <span class=\"hljs-string\">&#x27;wb&#x27;</span>) <span class=\"hljs-keyword\">as</span> file:\n        file.write(request.content)\n    <span class=\"hljs-keyword\">return</span> csrf_token, do_ocr(request.content)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-params\">username, password</span>):\n    rsa_key = get_utils()\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        session = requests.session()\n        session.timeout = <span class=\"hljs-number\">5</span>\n        session.headers.update(&#123;\n            <span class=\"hljs-string\">&#x27;User-Agent&#x27;</span>: <span class=\"hljs-string\">&#x27;Y.J.Aickson&#x27;</span>\n        &#125;)\n        csrf_token, code = get_code(session)\n        request = session.post(<span class=\"hljs-string\">&#x27;https://m.bjyouth.net/site/login&#x27;</span>, data=&#123;\n            <span class=\"hljs-string\">&#x27;_csrf_mobile&#x27;</span>: csrf_token,\n            <span class=\"hljs-string\">&#x27;Login[username]&#x27;</span>: base64.b64encode(rsa.encrypt(username.encode(), rsa_key)).decode(),\n            <span class=\"hljs-string\">&#x27;Login[password]&#x27;</span>: base64.b64encode(rsa.encrypt(password.encode(), rsa_key)).decode(),\n            <span class=\"hljs-string\">&#x27;Login[verifyCode]&#x27;</span>: code\n        &#125;)\n        <span class=\"hljs-keyword\">if</span> request.text == <span class=\"hljs-string\">&#x27;8&#x27;</span>:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;识别的验证码错误，重试中&#x27;</span>)\n            <span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;fail&#x27;</span> <span class=\"hljs-keyword\">in</span> request.text:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;登录失败&#x27;</span>)\n            exit(<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> session\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    username, password = get_user_info(<span class=\"hljs-string\">&#x27;bjyouth&#x27;</span>)\n    login(username, password)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;登录成功&#x27;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:\n    main()\n</code></pre>\n","length":"2.9k","time":"14min","categories":["Buaa","Security"],"tags":["TCP","Python"]}