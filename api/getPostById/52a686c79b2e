{"id":"52a686c79b2e","title":"Hexo Theme Naive 部分技术细节说明","created":"2023-01-28T14:46:49.000Z","updated":"2023-01-28T15:53:13.000Z","raw":"<p><a href=\"https://github.com/Chenrt-ggx/HexoThemeNaive\">Hexo Theme Naive</a> 的项目架构，主题切换，路由方案等。</p>\n<span id=\"more\"></span>\n<h2 id=\"伪前后端分离\"><a class=\"markdownIt-Anchor\" href=\"#伪前后端分离\"></a> 伪前后端分离</h2>\n<p>使用 <a href=\"https://github.com/Chenrt-ggx/HexoThemeNaive\">Hexo Theme Naive</a> 时，从完成 Markdown 博客后到部署博客网站前会经历以下过程：</p>\n<ul>\n<li>Hexo 通过 <a href=\"https://github.com/Chenrt-ggx/HexoRestfulApi\">Hexo Restful Api</a> 生成静态的 json 格式的 API，例如<a href=\"https://github.com/Chenrt-ggx/Chenrt-ggx.github.io\">此仓库</a>中的 api 目录。</li>\n<li>Hexo 通过 <a href=\"https://github.com/Chenrt-ggx/HexoRestfulApi\">Hexo Restful Api</a> 按路由规则生成用于 SEO 和回退路由的 HTML 文件，例如<a href=\"https://github.com/Chenrt-ggx/Chenrt-ggx.github.io\">此仓库</a>中的 category、tag、archive 等目录。</li>\n<li>Hexo 将 themes 中 <a href=\"https://github.com/Chenrt-ggx/HexoThemeNaive\">Hexo Theme Naive</a> 的静态资源复制到部署的目录下，例如<a href=\"https://github.com/Chenrt-ggx/Chenrt-ggx.github.io\">此仓库</a>中的 js、css 等目录。</li>\n</ul>\n<p>使用 <a href=\"https://github.com/Chenrt-ggx/HexoThemeNaive\">Hexo Theme Naive</a> 时，从部署博客网站后到您看到网页前会经历以下过程：</p>\n<ul>\n<li>浏览器根据浏览的页面请求博客的 HTML 文件，这些文件在部署博客网站前第二阶段产生（通过 <a href=\"https://github.com/Chenrt-ggx/HexoRestfulApi\">Hexo Restful Api</a> ）。</li>\n<li>浏览器解析 HTML 文件，加载其中的 CSS 文件和 JS 文件，CSS 文件和 JS 文件再继续加载其它 CSS 文件和 JS 文件，这些文件在部署博客网站前第三阶段产生（直接复制）。</li>\n<li>浏览器执行 JS 代码异步请求 json 资源，根据响应渲染页面，这些资源在部署博客网站前第一阶段产生（通过 <a href=\"https://github.com/Chenrt-ggx/HexoRestfulApi\">Hexo Restful Api</a> ）。</li>\n</ul>\n<h2 id=\"主题切换\"><a class=\"markdownIt-Anchor\" href=\"#主题切换\"></a> 主题切换</h2>\n<p><a href=\"https://github.com/Chenrt-ggx/HexoThemeNaive\">Hexo Theme Naive</a> 支持亮色主题（默认）和暗色主题，设置存储在 LocalStorage 中。</p>\n<p>对于 Markdown 样式，分别使用了如下文件：</p>\n<ul>\n<li>亮色 <code>github-markdown-css/github-markdown-light.css</code>。</li>\n<li>暗色 <code>github-markdown-css/github-markdown-dark.css</code>。</li>\n</ul>\n<p>对于代码样式，分别使用了如下文件：</p>\n<ul>\n<li>亮色 <code>highlight.js/styles/stackoverflow-light.css</code>。</li>\n<li>暗色 <code>highlight.js/styles/stackoverflow-dark.css</code>。</li>\n</ul>\n<p>由于在引入 css 文件后无法撤销引入、使用了 v-html 因而样式无法只作用于一个组件，在切换亮色主题和暗色主题时 <a href=\"https://github.com/Chenrt-ggx/HexoThemeNaive\">Hexo Theme Naive</a> 会自动进行一次刷新来更换样式。</p>\n<h2 id=\"路由方案\"><a class=\"markdownIt-Anchor\" href=\"#路由方案\"></a> 路由方案</h2>\n<p>为了更友好的 SEO，前端路由采用 HTML5 模式而不是 Hash 模式创建，两种模式的区别如下：</p>\n<h3 id=\"hash-模式\"><a class=\"markdownIt-Anchor\" href=\"#hash-模式\"></a> Hash 模式</h3>\n<blockquote>\n<p>Hash 模式是用 createWebHashHistory() 创建的：</p>\n<p>这种历史模式在内部传递的实际 URL 之前使用了一个哈希字符（#）。由于这部分 URL 从未被发送到服务器，所以它不需要在服务器层面上进行任何特殊处理。</p>\n</blockquote>\n<h3 id=\"html5-模式\"><a class=\"markdownIt-Anchor\" href=\"#html5-模式\"></a> HTML5 模式</h3>\n<blockquote>\n<p>HTML5 模式是用 createWebHistory() 创建的：</p>\n<p>当使用这种历史模式时，URL 会看起来很 “正常”，例如 <a href=\"https://example.com/user/id\">https://example.com/user/id</a>。但由于我们的应用是一个单页的客户端应用，如果没有适当的服务器配置，用户在浏览器中直接访问 <a href=\"https://example.com/user/id\">https://example.com/user/id</a>，就会得到一个 404 错误。</p>\n</blockquote>\n<p>如果博客网站部署在自己的服务器上，自然有一百种方法实现如果 URL 不匹配任何静态资源，就提供与 index.html 相同的页面。但如果博客网站使用 GitHub Pages 等方式部署，就无法通过服务器配置解决问题。</p>\n<p>为了解决这个问题，需要配置 <a href=\"https://github.com/Chenrt-ggx/HexoRestfulApi\">Hexo Restful Api</a> 以生成对应的静态页面。在生成静态页面的同时，<a href=\"https://github.com/Chenrt-ggx/HexoRestfulApi\">Hexo Restful Api</a> 还会进行以下工作来一定程度上优化 SEO：</p>\n<ul>\n<li>根据配置设置在静态页面的 title 和 meta 等内容。</li>\n<li>在 noscript 标签中生成页面内容，和 <a href=\"https://github.com/Chenrt-ggx/HexoThemeNaive\">Hexo Theme Naive</a> 前端保持一致。</li>\n</ul>\n<h2 id=\"路由设计\"><a class=\"markdownIt-Anchor\" href=\"#路由设计\"></a> 路由设计</h2>\n<blockquote>\n<p>关于 FullPost、SimplePost、TinyPost 和博客 ID 等概念，请参考 <a href=\"https://github.com/Chenrt-ggx/HexoRestfulApi\">Hexo Restful Api</a> 文档。</p>\n</blockquote>\n<h3 id=\"home-路由\"><a class=\"markdownIt-Anchor\" href=\"#home-路由\"></a> Home 路由</h3>\n<p>首页，路由为 <code>/</code>，内容包括主副标题和最新 5 篇博客（SimplePost）。</p>\n<h3 id=\"blog-相关\"><a class=\"markdownIt-Anchor\" href=\"#blog-相关\"></a> Blog 相关</h3>\n<p>博客内容页（FullPost）路由为 <code>/blog/:id</code>，此处的 id 对应博客的 ID。</p>\n<p>博客浏览页（SimplePost）路由为 <code>/blogs/:id</code>，分页显示所有博客，此处的 id 对应页码。</p>\n<h3 id=\"category-相关\"><a class=\"markdownIt-Anchor\" href=\"#category-相关\"></a> Category 相关</h3>\n<p>目录总览页，路由为 <code>/category</code>，显示所有目录和对应的博客（TinyPost）。</p>\n<p>目录筛选页，路由为 <code>/category/:id(.*)*</code>，显示筛选的目录对应的博客（SimplePost），此处的 id 级数不定，最后一级为页码，前面若干级为目录路径。</p>\n<h3 id=\"tag-相关\"><a class=\"markdownIt-Anchor\" href=\"#tag-相关\"></a> Tag 相关</h3>\n<p>标签总览页，路由为 <code>/tag</code>，显示所有标签和对应的博客（TinyPost）。</p>\n<p>标签筛选页，路由为 <code>/tag/:id(.*)*</code>，显示筛选的标签对应的博客（SimplePost），此处的 id 分两级，分别是标签名和页码。</p>\n<h3 id=\"archive-相关\"><a class=\"markdownIt-Anchor\" href=\"#archive-相关\"></a> Archive 相关</h3>\n<p>归档总览页，路由为 <code>/archive</code>，显示所有归档和对应的博客（TinyPost）。</p>\n<p>归档筛选页，路由为 <code>/archive/:id(.*)*</code>，显示筛选的归档对应的博客（SimplePost），此处的 id 分三级，分别是年份（四位数）、月份（两位数补 0）和页码。</p>\n<h3 id=\"其它路由\"><a class=\"markdownIt-Anchor\" href=\"#其它路由\"></a> 其它路由</h3>\n<p>关于页，路由为 <code>/about</code>，内容包括作者、邮箱、自我介绍等内容。</p>\n<p>前端错误页，路由为 <code>:match(.*)*</code>。</p>\n<h2 id=\"其它细节\"><a class=\"markdownIt-Anchor\" href=\"#其它细节\"></a> 其它细节</h2>\n<h3 id=\"v-html-安全性\"><a class=\"markdownIt-Anchor\" href=\"#v-html-安全性\"></a> v-html 安全性</h3>\n<p><a href=\"https://github.com/Chenrt-ggx/HexoThemeNaive\">Hexo Theme Naive</a> 默认博客内容是由博客的创建者控制的，因而在没有进行任何过滤的情况下使用了 v-html 渲染。如果博客内容可以由不可信任者控制，需要在传入前使用 js-xss 等工具进行白名单过滤，以免出现 XSS 漏洞。</p>\n<h3 id=\"csr-与-ssr\"><a class=\"markdownIt-Anchor\" href=\"#csr-与-ssr\"></a> CSR 与 SSR</h3>\n<p><a href=\"https://github.com/Chenrt-ggx/HexoThemeNaive\">Hexo Theme Naive</a> 采用了 CSR 的模式。没有使用 SSR 一方面是因为服务端渲染无法产生 Release 和在 Hexo Server 中预览，另一方面是因为<s>Nuxt.js 和 vite-plugin-ssr 我不熟</s>。</p>\n","length":"1.4k","time":"5min","categories":["Hexo"],"tags":["Frontend","Vue"]}