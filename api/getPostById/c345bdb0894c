{"id":"c345bdb0894c","title":"简易维吉尼亚密码破译工具的实现","created":"2022-05-28T14:02:17.000Z","updated":"2022-05-28T14:02:17.000Z","raw":"<p>[迁移自博客园] | 密码学简明教程古典密码技术 3-13，写完之后才知道重合指数法 QAQ。</p>\n<span id=\"more\"></span>\n<h2 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\"></a> 问题描述</h2>\n<p>简明密码学教程，第 3 章古典密码技术，习题 3-13。（下面真的只是一张图片吗？）</p>\n<img src=\"/assets/images/vigenere.jpg\" width=\"80%\" />\n<h2 id=\"破译思路\"><a class=\"markdownIt-Anchor\" href=\"#破译思路\"></a> 破译思路</h2>\n<h3 id=\"获得秘钥长度\"><a class=\"markdownIt-Anchor\" href=\"#获得秘钥长度\"></a> 获得秘钥长度</h3>\n<p>考虑密文中的两个长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">len</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span></span></span></span> 的子串，如果这两个子串相等，一种可能是这两个子串的明文相等，且间隔是秘钥长度的整数倍，记概率为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>，另一种可能是因为巧合相等，记概率为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span>，显然 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> 随着 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">len</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span></span></span></span> 的增长而增大。</p>\n<p>对于若干合适的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">len</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span></span></span></span>，分别枚举密文中全部长为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">len</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span></span></span></span> 的子串，将其按等于关系分成若干等价类，对每一个等价类，统计类内任意两元素的间距 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">gap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span> 并将各个等价类的统计结果合并，即可得到若干个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">gap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span>，每个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">gap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span> 可能是秘钥长度的整数倍。</p>\n<p>为使每个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">gap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span> 有较高的几率是秘钥长度的整数倍，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">len</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span></span></span></span> 不可以过短，否则因巧合导致的两个子串相等的情况将增加，同时 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">len</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span></span></span></span> 也不可以过长，否则将导致样本减小，不利于通过频率分析获得秘钥，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">len</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span></span></span></span> 可根据密文情况选择，对于本题中的密文，选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">]</mo><mo>∩</mo><msup><mi>Z</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">len\\in[3,5]\\cap{Z}^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span>。</p>\n<p>获得若干 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">gap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span> 后，由于无法保证完全不存在因巧合导致的两个子串相等的情况，不可以直接计算全部 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">gap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span> 的最大公约数，笔者采用的方式是从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> 开始枚举 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>，计算全部 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">gap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span> 中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 的倍数的数量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">cnt_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，选择使 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">cnt_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 最大的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 作为秘钥长度。</p>\n<p>上述方式的问题是可能造成误判，例如实际秘钥长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>，按照上述方式可能得出秘钥长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>，为此，对于每一个使 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">cnt_i&gt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 的秘钥长度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>，记录元组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,cnt_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，将全部元组按 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">cnt_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为第一关键字降序，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 为第二关键字降序排序，并取前 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">1/4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">4</span></span></span></span> 作为可能的秘钥长度。</p>\n<h3 id=\"获得秘钥\"><a class=\"markdownIt-Anchor\" href=\"#获得秘钥\"></a> 获得秘钥</h3>\n<p>对给定的秘钥长度，只要将密文按照位置模秘钥长度同余的关系分成若干等价类，再通过按模秘钥长度的结果从小到大的第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 个等价类，采用频率分析的方式破译出秘钥的第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 位，即可得到秘钥。</p>\n<p>具体而言，对于第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 个等价类，枚举秘钥在第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 位可能的值，在本题中即为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>26</mn></mrow><annotation encoding=\"application/x-tex\">26</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span></span></span></span> 个字母，对每一个枚举的值 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>，可通过下式计算等价类中每一个密文字符对应的明文：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>e</mi><mi>n</mi><mi>c</mi><mi>r</mi><mi>y</mi><mi>p</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi mathvariant=\"normal\">_</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>r</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mn>26</mn></mrow><annotation encoding=\"application/x-tex\">(encrypted\\_char-k)\\%26\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord\">2</span><span class=\"mord\">6</span></span></span></span></span></p>\n<p>得到等价类中全部的明文字符后，统计每个字符出现的频率，和标准的自然语言中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>26</mn></mrow><annotation encoding=\"application/x-tex\">26</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">6</span></span></span></span> 个字母出现频率计算相关性 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>r</mi><msub><mi>r</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">corr_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，选择使 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>r</mi><msub><mi>r</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">corr_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 最大的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 作为秘钥的第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 位，并记此时的相关性为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>r</mi><msub><mi>r</mi><mrow><mi>m</mi><mi>a</mi><msub><mi>x</mi><mi>i</mi></msub></mrow></msub></mrow><annotation encoding=\"application/x-tex\">corr_{max_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68066em;vertical-align:-0.2501em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139199999999997em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span></span></span></span>，如此即可得到秘钥。这个方案依赖于被加密的明文足够长，且字符出现的频率存在公开的统计特征。</p>\n<p>由于获得秘钥长度的过程中，产生了若干候选的秘钥长度，需要衡量各个秘钥长度下得到的秘钥的好坏，笔者采用的策略是对每一个秘钥。计算其每一位上最终结果的相关性的平均值，并乘以全部 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">gap</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span> 中是此秘钥长度的倍数的数量，具体而言，秘钥长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">len</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span></span></span></span> 时，其 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">weight</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span> 可通过下式计算：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><msub><mi>t</mi><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow></msub><mo>=</mo><mo stretchy=\"false\">(</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow></munderover><mi>c</mi><mi>o</mi><mi>r</mi><msub><mi>r</mi><mrow><mi>m</mi><mi>a</mi><msub><mi>x</mi><mi>i</mi></msub></mrow></msub><mi mathvariant=\"normal\">/</mi><mi>l</mi><mi>e</mi><mi>n</mi><mo stretchy=\"false\">)</mo><mo>×</mo><msub><mrow><mi>c</mi><mi>n</mi><mi>t</mi></mrow><mrow><mi>l</mi><mi>e</mi><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">weight_{len}=(\\sum_{i=0}^{len}corr_{max_i}/len)\\times{cnt}_{len}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1137820000000005em;vertical-align:-1.277669em;\"></span><span class=\"mopen\">(</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8361130000000003em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139199999999997em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">weight</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span> 最大的结果有较大可能是正确结果，但也有可能出错，因此可按照 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">weight</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span> 从大到小的顺序，用秘钥分别解密出原文、给出可信程度并人工选择，笔者采用的可信程度为经过归一化处理的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">weight</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span>。</p>\n<h2 id=\"破译工具实现\"><a class=\"markdownIt-Anchor\" href=\"#破译工具实现\"></a> 破译工具实现</h2>\n<p>偷个懒，拿 Python 写了。</p>\n<h3 id=\"获得秘钥长度-2\"><a class=\"markdownIt-Anchor\" href=\"#获得秘钥长度-2\"></a> 获得秘钥长度</h3>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_gap</span>(<span class=\"hljs-params\">src</span>):\n    gaps = []\n    substr = &#123;&#125;\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_str</span>(<span class=\"hljs-params\">length</span>):\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(src) - length):\n            s = src[index: index + length]\n            <span class=\"hljs-keyword\">if</span> substr.get(s) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                substr[s] = []\n            substr[s].append(index)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_gap</span>(<span class=\"hljs-params\">index_list</span>):\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(index_list)):\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i + <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(index_list)):\n                gaps.append(index_list[j] - index_list[i])\n\n    <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>):\n        update_str(value)\n    <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-keyword\">in</span> substr.keys():\n        update_gap(substr[key])\n\n    result = []\n    <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">max</span>(gaps)):\n        count = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> gap <span class=\"hljs-keyword\">in</span> gaps:\n            <span class=\"hljs-keyword\">if</span> gap % value == <span class=\"hljs-number\">0</span>:\n                count += <span class=\"hljs-number\">1</span>\n        result.append(&#123;<span class=\"hljs-string\">&#x27;length&#x27;</span>: value, <span class=\"hljs-string\">&#x27;count&#x27;</span>: count&#125;)\n\n    result = <span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-string\">&#x27;count&#x27;</span>] &gt; <span class=\"hljs-number\">1</span>, result)\n    cmp = cmp_to_key(<span class=\"hljs-keyword\">lambda</span> x, y: y[<span class=\"hljs-string\">&#x27;count&#x27;</span>] - x[<span class=\"hljs-string\">&#x27;count&#x27;</span>] <span class=\"hljs-keyword\">if</span> (x[<span class=\"hljs-string\">&#x27;count&#x27;</span>] - y[<span class=\"hljs-string\">&#x27;count&#x27;</span>] != <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">else</span> y[<span class=\"hljs-string\">&#x27;length&#x27;</span>] - x[<span class=\"hljs-string\">&#x27;length&#x27;</span>])\n    result = <span class=\"hljs-built_in\">sorted</span>(result, key=cmp)\n    <span class=\"hljs-keyword\">return</span> result[<span class=\"hljs-number\">0</span>: <span class=\"hljs-built_in\">len</span>(result) // <span class=\"hljs-number\">4</span>], gaps\n</code></pre>\n<h3 id=\"获得秘钥-2\"><a class=\"markdownIt-Anchor\" href=\"#获得秘钥-2\"></a> 获得秘钥</h3>\n<pre class=\"highlight\"><code class=\"python\">frequency = [<span class=\"hljs-number\">0.08167</span>, <span class=\"hljs-number\">0.01492</span>, <span class=\"hljs-number\">0.02782</span>, <span class=\"hljs-number\">0.04253</span>, <span class=\"hljs-number\">0.12702</span>, <span class=\"hljs-number\">0.02228</span>, <span class=\"hljs-number\">0.02015</span>, <span class=\"hljs-number\">0.06094</span>, <span class=\"hljs-number\">0.06966</span>, <span class=\"hljs-number\">0.00153</span>,\n             <span class=\"hljs-number\">0.00772</span>, <span class=\"hljs-number\">0.04025</span>, <span class=\"hljs-number\">0.02406</span>, <span class=\"hljs-number\">0.06749</span>, <span class=\"hljs-number\">0.07507</span>, <span class=\"hljs-number\">0.01929</span>, <span class=\"hljs-number\">0.00095</span>, <span class=\"hljs-number\">0.05987</span>, <span class=\"hljs-number\">0.06327</span>, <span class=\"hljs-number\">0.09056</span>,\n             <span class=\"hljs-number\">0.02758</span>, <span class=\"hljs-number\">0.00978</span>, <span class=\"hljs-number\">0.02360</span>, <span class=\"hljs-number\">0.00150</span>, <span class=\"hljs-number\">0.01974</span>, <span class=\"hljs-number\">0.00074</span>]\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_key</span>(<span class=\"hljs-params\">encrypted, gaps</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_key</span>(<span class=\"hljs-params\">src, length</span>):\n        result = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(length)]\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(length):\n            <span class=\"hljs-keyword\">match</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&#x27;-inf&#x27;</span>)\n            <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">26</span>):\n                freq = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">26</span>)]\n                <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(index, <span class=\"hljs-built_in\">len</span>(src), length):\n                    freq[(<span class=\"hljs-built_in\">ord</span>(src[k]) - <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>) + char) % <span class=\"hljs-number\">26</span>] += <span class=\"hljs-number\">1</span>\n                corr = pd.Series(freq).corr(pd.Series(frequency), method=<span class=\"hljs-string\">&#x27;pearson&#x27;</span>)\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">match</span> &lt; corr:\n                    <span class=\"hljs-keyword\">match</span>, result[index] = corr, &#123;<span class=\"hljs-string\">&#x27;corr&#x27;</span>: corr, <span class=\"hljs-string\">&#x27;char&#x27;</span>: (<span class=\"hljs-number\">26</span> - char) % <span class=\"hljs-number\">26</span>&#125;\n        <span class=\"hljs-keyword\">return</span> result\n\n    keys = []\n    <span class=\"hljs-keyword\">for</span> gap <span class=\"hljs-keyword\">in</span> gaps:\n        key = test_key(encrypted, gap[<span class=\"hljs-string\">&#x27;length&#x27;</span>])\n        avg = <span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-string\">&#x27;corr&#x27;</span>], key)) / <span class=\"hljs-built_in\">len</span>(key)\n        key = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-string\">&#x27;char&#x27;</span>], key))\n        keys.append(&#123;<span class=\"hljs-string\">&#x27;key&#x27;</span>: key, <span class=\"hljs-string\">&#x27;weight&#x27;</span>: avg * gap[<span class=\"hljs-string\">&#x27;count&#x27;</span>]&#125;)\n    total = <span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-string\">&#x27;weight&#x27;</span>], keys))\n    keys = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-keyword\">lambda</span> x: &#123;<span class=\"hljs-string\">&#x27;key&#x27;</span>: x[<span class=\"hljs-string\">&#x27;key&#x27;</span>], <span class=\"hljs-string\">&#x27;weight&#x27;</span>: x[<span class=\"hljs-string\">&#x27;weight&#x27;</span>] / total&#125;, keys))\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sorted</span>(keys, key=<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-string\">&#x27;weight&#x27;</span>], reverse=<span class=\"hljs-literal\">True</span>)\n</code></pre>\n<h3 id=\"运行结果\"><a class=\"markdownIt-Anchor\" href=\"#运行结果\"></a> 运行结果</h3>\n<pre class=\"highlight\"><code class=\"plain\">data: CHREEVOAHMAERATBIAXXWTNXBEEOPHBSBQMQEQERBWRVXUOAKXAOSXXWEAHBWGJMMQMNKGRFVGXWTRZXWIAKLXFPSKAUTEMNDCMGTSXMXBTUIADNGMGPSRELXNJELXVRVPRTULHDNQWTWDTYGBPHXTFALJHASVBFXNGLLCHRZBWELEKMSJIKNBHWRJGNMGJSGLXFEYPHAGNRBIEQJTAMRVLCRREMNDGLXRRIMGNSNRWCHRQHAEYEVTAQEBBIPEEWEVKAKOEWADREMXMTBJJCHRTKDNVRZCHRCLQOHPWQAIIWXNRMGWOIIFKEE\n\nuse standard frequency list: [0.08167, 0.01492, 0.02782, 0.04253, 0.12702, 0.02228, 0.02015, 0.06094, 0.06966, 0.00153, 0.00772, 0.04025, 0.02406, 0.06749, 0.07507, 0.01929, 0.00095, 0.05987, 0.06327, 0.09056, 0.02758, 0.00978, 0.0236, 0.0015, 0.01974, 0.00074]\n\nselect gap [&#123;'length': 5, 'count': 17&#125;, &#123;'length': 10, 'count': 7&#125;, &#123;'length': 2, 'count': 7&#125;, &#123;'length': 25, 'count': 5&#125;] from [165, 235, 275, 285, 70, 110, 120, 40, 50, 10, 35, 55, 109, 125, 125, 5, 30, 49, 125]\n\n-----------------------------\n\ntest key &quot;janet&quot; with reliability: 0.5395987448627999\ndecrypted result: thealmondtreewasintentativeblossomthedayswerelongeroftenendingwithmagnificenteveningsofcorrugatedpinkskiesthehuntingseasonwasoverwithhoundsandgunsputawayforsixmonthsthevineyardswerebusyagainasthewellorganizedfarmerstreatedtheirvinesandthemorelackadaisicalneighborshurriedtofqthepruningtheyshouldhavedoneinnovember\n\n-----------------------------\n\ntest key &quot;janetjanet&quot; with reliability: 0.19399131837431283\ndecrypted result: thealmondtreewasintentativeblossomthedayswerelongeroftenendingwithmagnificenteveningsofcorrugatedpinkskiesthehuntingseasonwasoverwithhoundsandgunsputawayforsixmonthsthevineyardswerebusyagainasthewellorganizedfarmerstreatedtheirvinesandthemorelackadaisicalneighborshurriedtofqthepruningtheyshouldhavedoneinnovember\n\n-----------------------------\n\ntest key &quot;ta&quot; with reliability: 0.1589574827075865\ndecrypted result: jhyelvvaomheyaabpaexdtuxielowhisiqtqlqlriwyveuvarxhozxewlaobdgqmtqtnrgyfcgewargxdihksxmpzkhuaetnkctgasemebaupaknnmnpzrllenqesxcrcpytbloduqdtddaynbwhetmasjoazvifennlscorgbdesermzjpkubowyjnntgqsnleflywhhguriilqqthmyvscyrlmudnleryitgusurdcorxhhefecthqlbiiwelwlvrarolwhdyetxttijqcorakkncrgcorjlxoopdqhipwenymnwvipfrel\n\n-----------------------------\n\ntest key &quot;tanetjahdtwanitjanltjauet&quot; with reliability: 0.10745245405530081\ndecrypted result: jhealmoteteeesasinmentttileblossuntuedwyswekeloggehofteneteiagwethmaznifbcedtevenithsbfckrrugttediinaskiestnfhhntengsetsonpaseverwitniohndoandgnnspntamayforsoymbntdstheoinerartswerebatyngaenastaeweelohganizejgaemenstrettedmheyrvinesgodgheioreltckawaiiicalneohhoorohurrbedthfqjheprunooggheushouedhaoedeneinnobfmoer\n</code></pre>\n<h2 id=\"最终结果\"><a class=\"markdownIt-Anchor\" href=\"#最终结果\"></a> 最终结果</h2>\n<p>秘钥为 janet，原文如下：</p>\n<pre class=\"highlight\"><code class=\"plain\">thealmondtreewasintentativeblossomthedayswerelongeroftenendingwithmagnificenteveningsofcorrugatedpinkskiesthehuntingseasonwasoverwithhoundsandgunsputawayforsixmonthsthevineyardswerebusyagainasthewellorganizedfarmerstreatedtheirvinesandthemorelackadaisicalneighborshurriedtofqthepruningtheyshouldhavedoneinnovember\n</code></pre>\n<h2 id=\"完整代码\"><a class=\"markdownIt-Anchor\" href=\"#完整代码\"></a> 完整代码</h2>\n<pre class=\"highlight\"><code class=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> cmp_to_key\n\nfrequency = [<span class=\"hljs-number\">0.08167</span>, <span class=\"hljs-number\">0.01492</span>, <span class=\"hljs-number\">0.02782</span>, <span class=\"hljs-number\">0.04253</span>, <span class=\"hljs-number\">0.12702</span>, <span class=\"hljs-number\">0.02228</span>, <span class=\"hljs-number\">0.02015</span>, <span class=\"hljs-number\">0.06094</span>, <span class=\"hljs-number\">0.06966</span>, <span class=\"hljs-number\">0.00153</span>,\n             <span class=\"hljs-number\">0.00772</span>, <span class=\"hljs-number\">0.04025</span>, <span class=\"hljs-number\">0.02406</span>, <span class=\"hljs-number\">0.06749</span>, <span class=\"hljs-number\">0.07507</span>, <span class=\"hljs-number\">0.01929</span>, <span class=\"hljs-number\">0.00095</span>, <span class=\"hljs-number\">0.05987</span>, <span class=\"hljs-number\">0.06327</span>, <span class=\"hljs-number\">0.09056</span>,\n             <span class=\"hljs-number\">0.02758</span>, <span class=\"hljs-number\">0.00978</span>, <span class=\"hljs-number\">0.02360</span>, <span class=\"hljs-number\">0.00150</span>, <span class=\"hljs-number\">0.01974</span>, <span class=\"hljs-number\">0.00074</span>]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_gap</span>(<span class=\"hljs-params\">src</span>):\n    gaps = []\n    substr = &#123;&#125;\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_str</span>(<span class=\"hljs-params\">length</span>):\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(src) - length):\n            s = src[index: index + length]\n            <span class=\"hljs-keyword\">if</span> substr.get(s) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                substr[s] = []\n            substr[s].append(index)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_gap</span>(<span class=\"hljs-params\">index_list</span>):\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(index_list)):\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i + <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(index_list)):\n                gaps.append(index_list[j] - index_list[i])\n\n    <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>):\n        update_str(value)\n    <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-keyword\">in</span> substr.keys():\n        update_gap(substr[key])\n\n    result = []\n    <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">max</span>(gaps)):\n        count = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> gap <span class=\"hljs-keyword\">in</span> gaps:\n            <span class=\"hljs-keyword\">if</span> gap % value == <span class=\"hljs-number\">0</span>:\n                count += <span class=\"hljs-number\">1</span>\n        result.append(&#123;<span class=\"hljs-string\">&#x27;length&#x27;</span>: value, <span class=\"hljs-string\">&#x27;count&#x27;</span>: count&#125;)\n\n    result = <span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-string\">&#x27;count&#x27;</span>] &gt; <span class=\"hljs-number\">1</span>, result)\n    cmp = cmp_to_key(<span class=\"hljs-keyword\">lambda</span> x, y: y[<span class=\"hljs-string\">&#x27;count&#x27;</span>] - x[<span class=\"hljs-string\">&#x27;count&#x27;</span>] <span class=\"hljs-keyword\">if</span> (x[<span class=\"hljs-string\">&#x27;count&#x27;</span>] - y[<span class=\"hljs-string\">&#x27;count&#x27;</span>] != <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">else</span> y[<span class=\"hljs-string\">&#x27;length&#x27;</span>] - x[<span class=\"hljs-string\">&#x27;length&#x27;</span>])\n    result = <span class=\"hljs-built_in\">sorted</span>(result, key=cmp)\n    <span class=\"hljs-keyword\">return</span> result[<span class=\"hljs-number\">0</span>: <span class=\"hljs-built_in\">len</span>(result) // <span class=\"hljs-number\">4</span>], gaps\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_key</span>(<span class=\"hljs-params\">encrypted, gaps</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_key</span>(<span class=\"hljs-params\">src, length</span>):\n        result = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(length)]\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(length):\n            <span class=\"hljs-keyword\">match</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&#x27;-inf&#x27;</span>)\n            <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">26</span>):\n                freq = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">26</span>)]\n                <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(index, <span class=\"hljs-built_in\">len</span>(src), length):\n                    freq[(<span class=\"hljs-built_in\">ord</span>(src[k]) - <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>) + char) % <span class=\"hljs-number\">26</span>] += <span class=\"hljs-number\">1</span>\n                corr = pd.Series(freq).corr(pd.Series(frequency), method=<span class=\"hljs-string\">&#x27;pearson&#x27;</span>)\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">match</span> &lt; corr:\n                    <span class=\"hljs-keyword\">match</span>, result[index] = corr, &#123;<span class=\"hljs-string\">&#x27;corr&#x27;</span>: corr, <span class=\"hljs-string\">&#x27;char&#x27;</span>: (<span class=\"hljs-number\">26</span> - char) % <span class=\"hljs-number\">26</span>&#125;\n        <span class=\"hljs-keyword\">return</span> result\n\n    keys = []\n    <span class=\"hljs-keyword\">for</span> gap <span class=\"hljs-keyword\">in</span> gaps:\n        key = test_key(encrypted, gap[<span class=\"hljs-string\">&#x27;length&#x27;</span>])\n        avg = <span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-string\">&#x27;corr&#x27;</span>], key)) / <span class=\"hljs-built_in\">len</span>(key)\n        key = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-string\">&#x27;char&#x27;</span>], key))\n        keys.append(&#123;<span class=\"hljs-string\">&#x27;key&#x27;</span>: key, <span class=\"hljs-string\">&#x27;weight&#x27;</span>: avg * gap[<span class=\"hljs-string\">&#x27;count&#x27;</span>]&#125;)\n    total = <span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-string\">&#x27;weight&#x27;</span>], keys))\n    keys = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-keyword\">lambda</span> x: &#123;<span class=\"hljs-string\">&#x27;key&#x27;</span>: x[<span class=\"hljs-string\">&#x27;key&#x27;</span>], <span class=\"hljs-string\">&#x27;weight&#x27;</span>: x[<span class=\"hljs-string\">&#x27;weight&#x27;</span>] / total&#125;, keys))\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sorted</span>(keys, key=<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-string\">&#x27;weight&#x27;</span>], reverse=<span class=\"hljs-literal\">True</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_result</span>(<span class=\"hljs-params\">src, key</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;test key \\&quot;&#x27;</span> + <span class=\"hljs-string\">&#x27;&#x27;</span>.join(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-keyword\">lambda</span> x: <span class=\"hljs-built_in\">chr</span>(x + <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>)), key[<span class=\"hljs-string\">&#x27;key&#x27;</span>])) + <span class=\"hljs-string\">&#x27;\\&quot;&#x27;</span>, end=<span class=\"hljs-string\">&#x27; &#x27;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;with reliability: &#x27;</span> + <span class=\"hljs-built_in\">str</span>(key[<span class=\"hljs-string\">&#x27;weight&#x27;</span>]))\n    result, key = [], key[<span class=\"hljs-string\">&#x27;key&#x27;</span>]\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(src)):\n        result.append((<span class=\"hljs-number\">26</span> + <span class=\"hljs-built_in\">ord</span>(src[i]) - <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&#x27;A&#x27;</span>) - key[i % <span class=\"hljs-built_in\">len</span>(key)]) % <span class=\"hljs-number\">26</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;decrypted result: &#x27;</span> + <span class=\"hljs-string\">&#x27;&#x27;</span>.join(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-keyword\">lambda</span> x: <span class=\"hljs-built_in\">chr</span>(x + <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>)), result)), end=<span class=\"hljs-string\">&#x27;\\n\\n&#x27;</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">solve</span>(<span class=\"hljs-params\">src</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;data: &#x27;</span> + src + <span class=\"hljs-string\">&#x27;\\n&#x27;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;use standard frequency list: &#x27;</span> + <span class=\"hljs-built_in\">str</span>(frequency) + <span class=\"hljs-string\">&#x27;\\n&#x27;</span>)\n    select, gaps = get_gap(src)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;select gap &#x27;</span> + <span class=\"hljs-built_in\">str</span>(select) + <span class=\"hljs-string\">&#x27; from &#x27;</span> + <span class=\"hljs-built_in\">str</span>(gaps) + <span class=\"hljs-string\">&#x27;\\n&#x27;</span>)\n    keys = get_key(src, select)\n    <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-keyword\">in</span> keys:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;-----------------------------&#x27;</span>, end=<span class=\"hljs-string\">&#x27;\\n\\n&#x27;</span>)\n        test_result(src, key)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:\n    data = <span class=\"hljs-string\">&#x27;CHREEVOAHMAERATBIAXXWTNXBEEOPHBSBQMQEQERBWRVXUOAKXAOSXXWEAHBWGJMMQMNKGRFVGXWTRZXWIAKLX&#x27;</span> + \\\n           <span class=\"hljs-string\">&#x27;FPSKAUTEMNDCMGTSXMXBTUIADNGMGPSRELXNJELXVRVPRTULHDNQWTWDTYGBPHXTFALJHASVBFXNGLLCHRZBWE&#x27;</span> + \\\n           <span class=\"hljs-string\">&#x27;LEKMSJIKNBHWRJGNMGJSGLXFEYPHAGNRBIEQJTAMRVLCRREMNDGLXRRIMGNSNRWCHRQHAEYEVTAQEBBIPEEWEV&#x27;</span> + \\\n           <span class=\"hljs-string\">&#x27;KAKOEWADREMXMTBJJCHRTKDNVRZCHRCLQOHPWQAIIWXNRMGWOIIFKEE&#x27;</span>\n    solve(data)\n</code></pre>\n","length":"2.2k","time":"11min","categories":["Buaa","Security"],"tags":["Python","Crypto"]}