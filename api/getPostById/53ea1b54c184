{"id":"53ea1b54c184","title":"针对浏览器 DevTools 的反调试技术","created":"2022-11-17T05:02:07.000Z","updated":"2022-11-17T05:02:07.000Z","raw":"<p>[迁移自博客园] | 有些人绕了反调试就没管了，有些整理之后直接顶会顶刊，这就是人与人的差距吧。</p>\n<span id=\"more\"></span>\n<p>本文基于<a href=\"https://www.usenix.org/system/files/sec21-musch.pdf\">这篇论文</a>和<a href=\"https://github.com/js-antidebug/js-antidebug.github.io\">这个代码仓库</a>（及其 <a href=\"https://js-antidebug.github.io/\">Pages 服务</a>）。</p>\n<h2 id=\"shortcut妨碍分析过程\"><a class=\"markdownIt-Anchor\" href=\"#shortcut妨碍分析过程\"></a> ShortCut（妨碍分析过程）</h2>\n<ul>\n<li>\n<p>工作原理</p>\n<p>用 JS 禁用常用快捷键触发的事件，如 <kbd>F12</kbd>、<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>I</kbd>、<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>J</kbd> 等。</p>\n</li>\n<li>\n<p>应对方式</p>\n<p>从浏览器菜单栏里面打开 DevTools，或者本地 mitmproxy 一下把响应里不让开 DevTools 的代码去掉；此外可以通过 <kbd>Ctrl</kbd>+<kbd>U</kbd>（一般不会禁用这个）或修改 URL 前缀将协议改为 <code>view-source</code> 查看网页源代码。</p>\n</li>\n<li>\n<p>参考代码</p>\n<p>下面的代码没有禁用 <kbd>Ctrl</kbd>+<kbd>U</kbd>：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) &#123;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(event);\n  <span class=\"hljs-keyword\">if</span> (\n    event.<span class=\"hljs-property\">key</span> == <span class=\"hljs-string\">&#x27;F12&#x27;</span> ||\n    ((event.<span class=\"hljs-property\">ctrlKey</span> || event.<span class=\"hljs-property\">altKey</span>) &amp;&amp; (event.<span class=\"hljs-property\">code</span> == <span class=\"hljs-string\">&#x27;KeyI&#x27;</span> || event.<span class=\"hljs-property\">key</span> == <span class=\"hljs-string\">&#x27;KeyJ&#x27;</span> || event.<span class=\"hljs-property\">key</span> == <span class=\"hljs-string\">&#x27;KeyU&#x27;</span>))\n  ) &#123;\n    event.<span class=\"hljs-title function_\">preventDefault</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  &#125;\n&#125;);\n\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;contextmenu&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) &#123;\n  event.<span class=\"hljs-title function_\">preventDefault</span>();\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n&#125;);\n</code></pre>\n</li>\n</ul>\n<h2 id=\"trigbreak妨碍分析过程\"><a class=\"markdownIt-Anchor\" href=\"#trigbreak妨碍分析过程\"></a> TrigBreak（妨碍分析过程）</h2>\n<ul>\n<li>\n<p>工作原理</p>\n<p>通过 <code>debugger</code> 语句可在 JS 中自动下断点；通过 <code>setInterval</code> 高频执行包含 <code>debugger</code> 语句的函数即可阻止用户下断点调试。</p>\n</li>\n<li>\n<p>应对方式</p>\n<p>在 DevTools 里停用断点可禁用所有断点；在 DevTools 里 <code>debugger</code> 语句所在的行号右键可禁用这一行的断点（一些毒瘤的变种会持续创造包含<code>debugger</code> 语句的匿名函数并执行，导致这种方法失效）；此外也可以使用支持去掉 <code>debugger</code> 语句的浏览器扩展或本地 mitmproxy 一下把响应里干坏事的代码去掉。</p>\n</li>\n<li>\n<p>参考代码</p>\n<p>下面的代码是一个简单的实现：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">debugger</span>;\n  <span class=\"hljs-built_in\">setTimeout</span>(debug, <span class=\"hljs-number\">1</span>);\n&#125;\n<span class=\"hljs-title function_\">debug</span>();\n</code></pre>\n<p>下面的代码是一个更加阴暗（使用 <a href=\"https://obfuscator.io/\">obfuscator</a> 混淆）的实现：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-keyword\">var</span> _0x1452cb = (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">var</span> _0x373b34 = !![];\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_0x5bd40f, _0x424dd9</span>) &#123;\n    <span class=\"hljs-keyword\">var</span> _0x502238 = _0x373b34\n      ? <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n          <span class=\"hljs-keyword\">if</span> (_0x424dd9) &#123;\n            <span class=\"hljs-keyword\">var</span> _0x476265 = _0x424dd9[<span class=\"hljs-string\">&#x27;apply&#x27;</span>](_0x5bd40f, <span class=\"hljs-variable language_\">arguments</span>);\n            _0x424dd9 = <span class=\"hljs-literal\">null</span>;\n            <span class=\"hljs-keyword\">return</span> _0x476265;\n          &#125;\n        &#125;\n      : <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;&#125;;\n    _0x373b34 = ![];\n    <span class=\"hljs-keyword\">return</span> _0x502238;\n  &#125;;\n&#125;)();\n\n(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-title function_\">_0x1452cb</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n    <span class=\"hljs-keyword\">var</span> _0xd0dec9 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">&#x27;function\\x20*\\x5c(\\x20*\\x5c)&#x27;</span>);\n    <span class=\"hljs-keyword\">var</span> _0x4c1d0d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">&#x27;\\x5c+\\x5c+\\x20*(?:[a-zA-Z_$][0-9a-zA-Z_$]*)&#x27;</span>, <span class=\"hljs-string\">&#x27;i&#x27;</span>);\n    <span class=\"hljs-keyword\">var</span> _0x257572 = <span class=\"hljs-title function_\">_0x448e86</span>(<span class=\"hljs-string\">&#x27;init&#x27;</span>);\n    <span class=\"hljs-keyword\">if</span> (!_0xd0dec9[<span class=\"hljs-string\">&#x27;test&#x27;</span>](_0x257572 + <span class=\"hljs-string\">&#x27;chain&#x27;</span>) || !_0x4c1d0d[<span class=\"hljs-string\">&#x27;test&#x27;</span>](_0x257572 + <span class=\"hljs-string\">&#x27;input&#x27;</span>)) &#123;\n      <span class=\"hljs-title function_\">_0x257572</span>(<span class=\"hljs-string\">&#x27;0&#x27;</span>);\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      <span class=\"hljs-title function_\">_0x448e86</span>();\n    &#125;\n  &#125;)();\n&#125;)();\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_0x448e86</span>(<span class=\"hljs-params\">_0x3d32ad</span>) &#123;\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_0x596cba</span>(<span class=\"hljs-params\">_0x4f5e6e</span>) &#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> _0x4f5e6e === <span class=\"hljs-string\">&#x27;string&#x27;</span>) &#123;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_0x43d248</span>) &#123;&#125;[<span class=\"hljs-string\">&#x27;constructor&#x27;</span>](<span class=\"hljs-string\">&#x27;while\\x20(true)\\x20&#123;&#125;&#x27;</span>)[<span class=\"hljs-string\">&#x27;apply&#x27;</span>](<span class=\"hljs-string\">&#x27;counter&#x27;</span>);\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-string\">&#x27;&#x27;</span> + _0x4f5e6e / _0x4f5e6e)[<span class=\"hljs-string\">&#x27;length&#x27;</span>] !== <span class=\"hljs-number\">0x1</span> || _0x4f5e6e % <span class=\"hljs-number\">0x14</span> === <span class=\"hljs-number\">0x0</span>) &#123;\n        (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n          <span class=\"hljs-keyword\">return</span> !![];\n        &#125;)\n          [<span class=\"hljs-string\">&#x27;constructor&#x27;</span>](<span class=\"hljs-string\">&#x27;debu&#x27;</span> + <span class=\"hljs-string\">&#x27;gger&#x27;</span>)\n          [<span class=\"hljs-string\">&#x27;call&#x27;</span>](<span class=\"hljs-string\">&#x27;action&#x27;</span>);\n      &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n          <span class=\"hljs-keyword\">return</span> ![];\n        &#125;)\n          [<span class=\"hljs-string\">&#x27;constructor&#x27;</span>](<span class=\"hljs-string\">&#x27;debu&#x27;</span> + <span class=\"hljs-string\">&#x27;gger&#x27;</span>)\n          [<span class=\"hljs-string\">&#x27;apply&#x27;</span>](<span class=\"hljs-string\">&#x27;stateObject&#x27;</span>);\n      &#125;\n    &#125;\n    <span class=\"hljs-title function_\">_0x596cba</span>(++_0x4f5e6e);\n  &#125;\n  <span class=\"hljs-keyword\">try</span> &#123;\n    <span class=\"hljs-keyword\">if</span> (_0x3d32ad) &#123;\n      <span class=\"hljs-keyword\">return</span> _0x596cba;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      <span class=\"hljs-title function_\">_0x596cba</span>(<span class=\"hljs-number\">0x0</span>);\n    &#125;\n  &#125; <span class=\"hljs-keyword\">catch</span> (_0x4c5b3a) &#123;&#125;\n&#125;\n\n<span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-title function_\">_0x448e86</span>();\n&#125;, <span class=\"hljs-number\">0xfa0</span>);\n</code></pre>\n</li>\n</ul>\n<h2 id=\"conclear妨碍分析过程\"><a class=\"markdownIt-Anchor\" href=\"#conclear妨碍分析过程\"></a> ConClear（妨碍分析过程）</h2>\n<ul>\n<li>\n<p>工作原理</p>\n<p>不断调用 <code>console.clear</code> 函数使运行期间，如果不用调试器设置断点，几乎不可能检查输出。</p>\n</li>\n<li>\n<p>应对方式</p>\n<p>在控制台设置里面把“保留日志”打开，或者把 <code>console.clear</code> 覆盖成空函数；当然同样可以用 mitmproxy 处理。</p>\n</li>\n<li>\n<p>参考代码</p>\n<p>下面的代码是一个简单的实现：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">clear</span>(<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">clear</span>();\n  <span class=\"hljs-built_in\">setTimeout</span>(clear, <span class=\"hljs-number\">10</span>);\n&#125;\n<span class=\"hljs-title function_\">clear</span>();\n</code></pre>\n</li>\n</ul>\n<h2 id=\"modbuilt改变分析结果\"><a class=\"markdownIt-Anchor\" href=\"#modbuilt改变分析结果\"></a> ModBuilt（改变分析结果）</h2>\n<ul>\n<li>\n<p>工作原理</p>\n<p>出于支持旧版浏览器等原因，JS 中所有的内置函数都可以被任意地重新定义，因此可重新定义分析者常用的 <code>console</code>、<code>String</code> 和 <code>JSON</code> 等对象及内置的函数。</p>\n</li>\n<li>\n<p>应对方式</p>\n<p>相比于妨碍分析过程，改变分析结果更加隐蔽；可在执行待测试的代码前，先保存一份 JS 的内置函数的引用，之后将使用 JS 内置函数改为使用保存的引用。</p>\n</li>\n<li>\n<p>参考代码</p>\n<p>下面的代码是一个简单的实现（仅示意，未考虑递归的情况）：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-keyword\">let</span> originalStringify = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-property\">stringify</span>;\n\n<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-property\">stringify</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj</span>) &#123;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj != <span class=\"hljs-string\">&#x27;object&#x27;</span>) &#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">originalStringify</span>(obj);\n  &#125;\n  <span class=\"hljs-keyword\">let</span> newObj = &#123;&#125;;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(obj)) &#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj[key] == <span class=\"hljs-string\">&#x27;string&#x27;</span>) &#123;\n      newObj[key] = obj[key].<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;shellcode&#x27;</span>, <span class=\"hljs-string\">&#x27;benign code&#x27;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;want to hide&#x27;</span>, <span class=\"hljs-string\">&#x27;do not want to hide&#x27;</span>);\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      newObj[key] = obj[key];\n    &#125;\n  &#125;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">originalStringify</span>(newObj);\n&#125;;\n\n<span class=\"hljs-keyword\">let</span> originalLog = <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">arg</span>) &#123;\n  arg = arg.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;shellcode&#x27;</span>, <span class=\"hljs-string\">&#x27;benign code&#x27;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">&#x27;want to hide&#x27;</span>, <span class=\"hljs-string\">&#x27;do not want to hide&#x27;</span>);\n  <span class=\"hljs-title function_\">originalLog</span>(arg);\n&#125;;\n</code></pre>\n<p>下面的代码使用 <a href=\"https://obfuscator.io/\">obfuscator</a> 生成，禁用了控制台输出：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-keyword\">var</span> _0x4bde55 = (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">var</span> _0x16e614 = !![];\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_0x41e722, _0xf342eb</span>) &#123;\n    <span class=\"hljs-keyword\">var</span> _0x280f64 = _0x16e614\n      ? <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n          <span class=\"hljs-keyword\">if</span> (_0xf342eb) &#123;\n            <span class=\"hljs-keyword\">var</span> _0x24a5ce = _0xf342eb[<span class=\"hljs-string\">&#x27;apply&#x27;</span>](_0x41e722, <span class=\"hljs-variable language_\">arguments</span>);\n            _0xf342eb = <span class=\"hljs-literal\">null</span>;\n            <span class=\"hljs-keyword\">return</span> _0x24a5ce;\n          &#125;\n        &#125;\n      : <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;&#125;;\n    _0x16e614 = ![];\n    <span class=\"hljs-keyword\">return</span> _0x280f64;\n  &#125;;\n&#125;)();\n\n<span class=\"hljs-keyword\">var</span> _0x54fe5d = <span class=\"hljs-title function_\">_0x4bde55</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">var</span> _0xb720ec = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;&#125;;\n  <span class=\"hljs-keyword\">var</span> _0x217a18;\n  <span class=\"hljs-keyword\">try</span> &#123;\n    <span class=\"hljs-keyword\">var</span> _0xc3cc4a = <span class=\"hljs-title class_\">Function</span>(<span class=\"hljs-string\">&#x27;return\\x20(function()\\x20&#x27;</span> + <span class=\"hljs-string\">&#x27;&#123;&#125;.constructor(\\x22return\\x20this\\x22)(\\x20)&#x27;</span> + <span class=\"hljs-string\">&#x27;);&#x27;</span>);\n    _0x217a18 = <span class=\"hljs-title function_\">_0xc3cc4a</span>();\n  &#125; <span class=\"hljs-keyword\">catch</span> (_0x228a20) &#123;\n    _0x217a18 = <span class=\"hljs-variable language_\">window</span>;\n  &#125;\n  <span class=\"hljs-keyword\">if</span> (!_0x217a18[<span class=\"hljs-string\">&#x27;console&#x27;</span>]) &#123;\n    _0x217a18[<span class=\"hljs-string\">&#x27;console&#x27;</span>] = (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_0x2266c8</span>) &#123;\n      <span class=\"hljs-keyword\">var</span> _0x104cf8 = &#123;&#125;;\n      _0x104cf8[<span class=\"hljs-string\">&#x27;log&#x27;</span>] = _0x2266c8;\n      _0x104cf8[<span class=\"hljs-string\">&#x27;warn&#x27;</span>] = _0x2266c8;\n      _0x104cf8[<span class=\"hljs-string\">&#x27;debug&#x27;</span>] = _0x2266c8;\n      _0x104cf8[<span class=\"hljs-string\">&#x27;info&#x27;</span>] = _0x2266c8;\n      _0x104cf8[<span class=\"hljs-string\">&#x27;error&#x27;</span>] = _0x2266c8;\n      _0x104cf8[<span class=\"hljs-string\">&#x27;exception&#x27;</span>] = _0x2266c8;\n      _0x104cf8[<span class=\"hljs-string\">&#x27;table&#x27;</span>] = _0x2266c8;\n      _0x104cf8[<span class=\"hljs-string\">&#x27;trace&#x27;</span>] = _0x2266c8;\n      <span class=\"hljs-keyword\">return</span> _0x104cf8;\n    &#125;)(_0xb720ec);\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    _0x217a18[<span class=\"hljs-string\">&#x27;console&#x27;</span>][<span class=\"hljs-string\">&#x27;log&#x27;</span>] = _0xb720ec;\n    _0x217a18[<span class=\"hljs-string\">&#x27;console&#x27;</span>][<span class=\"hljs-string\">&#x27;warn&#x27;</span>] = _0xb720ec;\n    _0x217a18[<span class=\"hljs-string\">&#x27;console&#x27;</span>][<span class=\"hljs-string\">&#x27;debug&#x27;</span>] = _0xb720ec;\n    _0x217a18[<span class=\"hljs-string\">&#x27;console&#x27;</span>][<span class=\"hljs-string\">&#x27;info&#x27;</span>] = _0xb720ec;\n    _0x217a18[<span class=\"hljs-string\">&#x27;console&#x27;</span>][<span class=\"hljs-string\">&#x27;error&#x27;</span>] = _0xb720ec;\n    _0x217a18[<span class=\"hljs-string\">&#x27;console&#x27;</span>][<span class=\"hljs-string\">&#x27;exception&#x27;</span>] = _0xb720ec;\n    _0x217a18[<span class=\"hljs-string\">&#x27;console&#x27;</span>][<span class=\"hljs-string\">&#x27;table&#x27;</span>] = _0xb720ec;\n    _0x217a18[<span class=\"hljs-string\">&#x27;console&#x27;</span>][<span class=\"hljs-string\">&#x27;trace&#x27;</span>] = _0xb720ec;\n  &#125;\n&#125;);\n\n<span class=\"hljs-title function_\">_0x54fe5d</span>();\n</code></pre>\n</li>\n</ul>\n<h2 id=\"widthdiff检测分析行为\"><a class=\"markdownIt-Anchor\" href=\"#widthdiff检测分析行为\"></a> WidthDiff（检测分析行为）</h2>\n<ul>\n<li>\n<p>工作原理</p>\n<p>更多的情况下，打开 DevTools 将水平或垂直地分割浏览器窗口，因而可以同时获得包括所有工具栏在内的整个浏览器窗口的大小（外部大小）和没有任何工具栏的内容区域的大小（内部大小），当差异超出阈值时认为开启了 DevTools。</p>\n</li>\n<li>\n<p>应对方式</p>\n<p>把 DevTools 在单独的窗口打开即可（身边不少人都默认单独窗口打开了），此外其它侧边栏的存在可能导致这种方式出现误判。</p>\n</li>\n<li>\n<p>参考代码</p>\n<p>下面的代码是一个参考的实现：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">detect</span>(<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">const</span> devtools = &#123; <span class=\"hljs-attr\">isOpen</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">orientation</span>: <span class=\"hljs-literal\">undefined</span> &#125;;\n  <span class=\"hljs-keyword\">const</span> threshold = <span class=\"hljs-number\">160</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">emitEvent</span> = (<span class=\"hljs-params\">isOpen, orientation</span>) =&gt; &#123;\n    <span class=\"hljs-keyword\">let</span> string = <span class=\"hljs-string\">&#x27;&lt;p&gt;DevTools are &#x27;</span> + (isOpen ? <span class=\"hljs-string\">&#x27;open&#x27;</span> : <span class=\"hljs-string\">&#x27;closed&#x27;</span>) + <span class=\"hljs-string\">&#x27;&lt;/p&gt;&#x27;</span>;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(string);\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">write</span>(string);\n  &#125;;\n\n  <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;\n    <span class=\"hljs-keyword\">const</span> widthThreshold = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">outerWidth</span> - <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerWidth</span> &gt; threshold;\n    <span class=\"hljs-keyword\">const</span> heightThreshold = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">outerHeight</span> - <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerHeight</span> &gt; threshold;\n    <span class=\"hljs-keyword\">const</span> orientation = widthThreshold ? <span class=\"hljs-string\">&#x27;vertical&#x27;</span> : <span class=\"hljs-string\">&#x27;horizontal&#x27;</span>;\n\n    <span class=\"hljs-keyword\">if</span> (\n      !(heightThreshold &amp;&amp; widthThreshold) &amp;&amp;\n      ((<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">Firebug</span> &amp;&amp; <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">Firebug</span>.<span class=\"hljs-property\">chrome</span> &amp;&amp; <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">Firebug</span>.<span class=\"hljs-property\">chrome</span>.<span class=\"hljs-property\">isInitialized</span>) ||\n        widthThreshold ||\n        heightThreshold)\n    ) &#123;\n      <span class=\"hljs-keyword\">if</span> (!devtools.<span class=\"hljs-property\">isOpen</span> || devtools.<span class=\"hljs-property\">orientation</span> !== orientation) &#123;\n        <span class=\"hljs-title function_\">emitEvent</span>(<span class=\"hljs-literal\">true</span>, orientation);\n      &#125;\n      devtools.<span class=\"hljs-property\">isOpen</span> = <span class=\"hljs-literal\">true</span>;\n      devtools.<span class=\"hljs-property\">orientation</span> = orientation;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(devtools.<span class=\"hljs-property\">isOpen</span>);\n      <span class=\"hljs-keyword\">if</span> (devtools.<span class=\"hljs-property\">isOpen</span>) &#123;\n        <span class=\"hljs-title function_\">emitEvent</span>(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">undefined</span>);\n      &#125;\n      devtools.<span class=\"hljs-property\">isOpen</span> = <span class=\"hljs-literal\">false</span>;\n      devtools.<span class=\"hljs-property\">orientation</span> = <span class=\"hljs-literal\">undefined</span>;\n    &#125;\n  &#125;, <span class=\"hljs-number\">500</span>);\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">module</span> !== <span class=\"hljs-string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>) &#123;\n    <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = devtools;\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">devtools</span> = devtools;\n  &#125;\n&#125;\n\n<span class=\"hljs-title function_\">detect</span>();\n</code></pre>\n</li>\n</ul>\n<h2 id=\"logget检测分析行为\"><a class=\"markdownIt-Anchor\" href=\"#logget检测分析行为\"></a> LogGet（检测分析行为）</h2>\n<ul>\n<li>\n<p>工作原理</p>\n<p>在一些控制台输出的方式中，被输出对象的 <code>toString</code> 方法在打开 DevTools 查看控制台的时候才被调用（如 <code>console.profile + console.profileEnd</code>），可以此进行区分。</p>\n</li>\n<li>\n<p>应对方式</p>\n<p>这是检测 DevTools 是否打开的一个非常可靠的方法，比较难应对；除了删除控制台对象的所有记录功能外，只能尝试本地 mitmproxy 来修改响应了。</p>\n</li>\n<li>\n<p>参考代码</p>\n<p>下面的代码是一个参考的实现（本文发布时有效）：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-keyword\">var</span> devtools = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;&#125;;\n\ndevtools.<span class=\"hljs-property\">toString</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">open</span>) &#123;\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">clear</span>();\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&#x27;DevTools were open! (You can close them again, but this text will stay)&#x27;</span>);\n    <span class=\"hljs-built_in\">clearInterval</span>(interval);\n  &#125;\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">open</span> = <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>;\n&#125;;\n\n<span class=\"hljs-keyword\">var</span> interval = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">profile</span>(devtools);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">profileEnd</span>(devtools);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">clear</span>();\n&#125;, <span class=\"hljs-number\">100</span>);\n</code></pre>\n<p>下面的代码是一个曾经有效的方式（利用 <code>console.log</code>，参考 <a href=\"https://stackoverflow.com/questions/7798748/find-out-whether-chrome-console-is-open/48287643\">Stack Overflow</a>）：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">var</span> devtools = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;&#125;;\n  devtools.<span class=\"hljs-property\">toString</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">opened</span> = <span class=\"hljs-literal\">true</span>;\n  &#125;;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;%c&#x27;</span>, devtools);\n  <span class=\"hljs-keyword\">if</span> (devtools.<span class=\"hljs-property\">opened</span>) &#123;\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&#x27;This technique is broken since Chrome 77. Only included for historical reasons&#x27;</span>);\n  &#125;\n&#125;\n<span class=\"hljs-built_in\">setTimeout</span>(check, <span class=\"hljs-number\">300</span>);\n</code></pre>\n<p>下面的代码是另一个曾经有效的方式（利用 <code>requestAnimationFrame</code>，参考 <a href=\"https://stackoverflow.com/questions/7798748/find-out-whether-chrome-console-is-open/48287643\">Stack Overflow</a>）：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-keyword\">var</span> checkStatus;\n<span class=\"hljs-keyword\">var</span> element = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Image</span>();\n\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(element, <span class=\"hljs-string\">&#x27;id&#x27;</span>, &#123;\n  <span class=\"hljs-attr\">get</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n    checkStatus = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Dev tools checker&#x27;</span>);\n  &#125;\n&#125;);\n\n<span class=\"hljs-title function_\">requestAnimationFrame</span>(<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">dir</span>(element);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(checkStatus);\n  <span class=\"hljs-keyword\">if</span> (checkStatus) &#123;\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&#x27;DevTools were open! (You can close them again, but this text will stay)&#x27;</span>);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">clear</span>();\n    <span class=\"hljs-keyword\">return</span>;\n  &#125;\n  <span class=\"hljs-title function_\">requestAnimationFrame</span>(check);\n&#125;);\n</code></pre>\n</li>\n</ul>\n<h2 id=\"monbreak基于时间的复杂反调试\"><a class=\"markdownIt-Anchor\" href=\"#monbreak基于时间的复杂反调试\"></a> MonBreak（基于时间的复杂反调试）</h2>\n<ul>\n<li>\n<p>工作原理</p>\n<p>由于 <code>debugger</code> 语句只有在开启了 DevTools 的情况下才会停止执行代码，我们可以简单地比较执行 <code>debugger</code> 语句前后的时间，如果超出阈值就认为 DevTools 已被打开；不同于 TrigBreak，MonBreak 的目标不是扰乱用户，而是推断出 DevTools 的状态，因而只要触发断点一次即可。</p>\n</li>\n<li>\n<p>应对方式</p>\n<p>由于存在（可疑的）<code>debugger</code> 语句，与 TrigBreak 类似，可在 DevTools 里停用断点以禁用所有断点，或在 DevTools 里 <code>debugger</code> 语句所在的行号右键禁用这一行的断点。</p>\n</li>\n<li>\n<p>参考代码</p>\n<p>下面的代码是一个参考的实现：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;load&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">var</span> threshold = <span class=\"hljs-number\">500</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">measure</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;\n    <span class=\"hljs-keyword\">const</span> start = performance.<span class=\"hljs-title function_\">now</span>();\n    <span class=\"hljs-keyword\">debugger</span>;\n    <span class=\"hljs-keyword\">const</span> time = performance.<span class=\"hljs-title function_\">now</span>() - start;\n    <span class=\"hljs-keyword\">if</span> (time &gt; threshold) &#123;\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&#x27;&lt;p&gt;DevTools were open since page load&lt;/p&gt;&#x27;</span>);\n    &#125;\n  &#125;;\n  <span class=\"hljs-built_in\">setInterval</span>(measure, <span class=\"hljs-number\">300</span>);\n&#125;);\n</code></pre>\n</li>\n</ul>\n<h2 id=\"newbreak基于时间的复杂反调试\"><a class=\"markdownIt-Anchor\" href=\"#newbreak基于时间的复杂反调试\"></a> NewBreak（基于时间的复杂反调试）</h2>\n<ul>\n<li>\n<p>工作原理</p>\n<p>为 MonBreak 一个更加隐蔽的变种，注意到分析者可能下断点调试，断点被命中时可以通过时间信息来区分，只要反复调用一个函数并记录时间。如果发现此函数突然花了很长的时间来执行，就很有可能是因为一个断点被命中了。</p>\n</li>\n<li>\n<p>应对方式</p>\n<p>虽然这种方法更隐蔽，但由于只检测了是否有人打开 DevTools，然后触发了一个断点，只要分析者在使用 DevTools 时根本不设置/触发断点，就没有什么效果了。</p>\n</li>\n<li>\n<p>参考代码</p>\n<p>下面的代码是一个简单的实现（仅示意，未考虑失去焦点时对 <code>setInterval</code> 产生的影响并使用 <code>hasFocus</code> 进行判断与处理）：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-keyword\">var</span> timeSinceLast;\n\n<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;load&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">var</span> threshold = <span class=\"hljs-number\">1000</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">measure</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;\n    <span class=\"hljs-keyword\">if</span> (!timeSinceLast) &#123;\n      timeSinceLast = performance.<span class=\"hljs-title function_\">now</span>();\n    &#125;\n    <span class=\"hljs-keyword\">const</span> diff = performance.<span class=\"hljs-title function_\">now</span>() - timeSinceLast;\n    <span class=\"hljs-keyword\">if</span> (diff &gt; threshold) &#123;\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&#x27;&lt;p&gt;A breakpoint was hit&lt;/p&gt;&#x27;</span>);\n    &#125;\n    timeSinceLast = performance.<span class=\"hljs-title function_\">now</span>();\n  &#125;;\n  <span class=\"hljs-built_in\">setInterval</span>(measure, <span class=\"hljs-number\">300</span>);\n&#125;);\n</code></pre>\n</li>\n</ul>\n<h2 id=\"conspam基于时间的复杂反调试\"><a class=\"markdownIt-Anchor\" href=\"#conspam基于时间的复杂反调试\"></a> ConSpam（基于时间的复杂反调试）</h2>\n<ul>\n<li>\n<p>工作原理</p>\n<p>利用浏览器关闭与打开 DevTools 时的性能差异进行判断，一个曾经有效的做法是创建许多内容较长的文本元素，并快速地在 DOM 中反复添加和删除它们；一个目前有效的做法是向控制台写大量的输出，并检查这需要多长时间。</p>\n</li>\n<li>\n<p>应对方式</p>\n<p>这个方法比较难处理；除了删除控制台对象的所有记录功能外，只能尝试本地 mitmproxy 来修改响应了。</p>\n<p>此外这个方法在实现上也存在一定难处，如果采用了固定的阈值，具有缓慢硬件的访问者可能被误判，如果采用了可变的阈值，就要首先测量开始时的几轮时间，因而只能应对 DevTools 在页面加载后被打开，而不是一开始就被打开的情况。</p>\n</li>\n<li>\n<p>参考代码</p>\n<p>下面的代码是一个参考的实现（本文发布时有效）：</p>\n<pre class=\"highlight\"><code class=\"js\"><span class=\"hljs-keyword\">var</span> baseline;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">measure</span>(<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">const</span> start = performance.<span class=\"hljs-title function_\">now</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) &#123;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">clear</span>();\n  &#125;\n  <span class=\"hljs-keyword\">const</span> time = performance.<span class=\"hljs-title function_\">now</span>() - start;\n  <span class=\"hljs-keyword\">if</span> (baseline === <span class=\"hljs-literal\">undefined</span>) &#123;\n    baseline = time;\n  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (time &gt; baseline * <span class=\"hljs-number\">2</span>) &#123;\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&#x27;DevTools were opened&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span>;\n  &#125;\n  <span class=\"hljs-built_in\">setTimeout</span>(measure, <span class=\"hljs-number\">1000</span>);\n&#125;\n\n<span class=\"hljs-title function_\">measure</span>();\n</code></pre>\n</li>\n</ul>\n<h2 id=\"结语\"><a class=\"markdownIt-Anchor\" href=\"#结语\"></a> 结语</h2>\n<blockquote>\n<p>A backdoor could always be cleverly disguised as a “bugdoor”.</p>\n</blockquote>\n<p>和全文相比，还是论文作者这里说的有水平呀，学到了学到了。</p>\n","length":"2.9k","time":"13min","categories":["Web"],"tags":["JavaScript","Browser"]}