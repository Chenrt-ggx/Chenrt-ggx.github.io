{"id":"990dcbbe9c9a","title":"数据结构大作业性能优化总结","created":"2020-07-14T03:38:49.000Z","updated":"2020-07-14T03:38:49.000Z","raw":"<p>[早期博客补档] | 以 2020 年数据结构大作业为例，本部分主要包括常数优化。</p>\n<span id=\"more\"></span>\n<p>部分常数优化不具有工程性，仅适合极致追求性能的时候使用。<s>团队开发中这样写可能遭到围殴（逃</s></p>\n<h2 id=\"常数优化\"><a class=\"markdownIt-Anchor\" href=\"#常数优化\"></a> 常数优化</h2>\n<h3 id=\"io-优化\"><a class=\"markdownIt-Anchor\" href=\"#io-优化\"></a> IO 优化</h3>\n<p>每次读入和输出需经历系统调用和进程切换的过程，时间开销较大，可通过在内存中维护 buffer 并使用 fread 和 fwrite 的方式一次性完成读入和输出，例如：</p>\n<pre class=\"highlight\"><code class=\"c\">in = fopen(<span class=\"hljs-string\">&quot;dictionary.txt&quot;</span>, <span class=\"hljs-string\">&quot;rb&quot;</span>);\nn = fread(buffer, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10000000</span>, in);\nfclose(in);\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\">out = fopen(<span class=\"hljs-string\">&quot;results.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>);\n<span class=\"hljs-built_in\">fprintf</span>(out, <span class=\"hljs-string\">&quot;%.5lf\\n&quot;</span>, ans);\nfwrite(print, <span class=\"hljs-number\">1</span>, tot, out);\nfclose(out);\n</code></pre>\n<p>经测试该优化对程序性能的提升效果显著。</p>\n<h3 id=\"单词单例存储\"><a class=\"markdownIt-Anchor\" href=\"#单词单例存储\"></a> 单词单例存储</h3>\n<p>如上所述，单词只存储一份值，并使用引用访问可以避免字符串复制，有效提高性能。结合 IO 优化可以得到一种高效实现单词只存储一份值的方式，buffer 切分：</p>\n<ul>\n<li>遍历 buffer，将字母之后不是字母的位置清零。</li>\n<li>遍历 buffer，找出所有零和非零的分界点（开头部分需要特判），即得到所有单词。后续访问单词时，只要访问单词的地址（在 buffer 上的下标）。</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\">buffer[n] = i = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">while</span> (buffer[i] &amp;&amp; !alpha[buffer[i]]) ++i;\n<span class=\"hljs-keyword\">while</span> (buffer[i]) &#123;\n    pos = &amp;buffer[i];\n    <span class=\"hljs-keyword\">while</span> (alpha[buffer[i]]) buffer[i++] |= <span class=\"hljs-number\">32</span>;\n    buffer[i++] = <span class=\"hljs-number\">0</span>;\n    ins(pos, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">while</span> (buffer[i] &amp;&amp; !alpha[buffer[i]]) ++i;\n&#125;\n</code></pre>\n<p>经测试该优化对程序性能的提升效果显著。</p>\n<h3 id=\"编译优化\"><a class=\"markdownIt-Anchor\" href=\"#编译优化\"></a> 编译优化</h3>\n<p>在代码开头通过 pragma 开启 O2 和 O3 编译优化（吸氧）：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(2)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(3,<span class=\"hljs-string\">&quot;Ofast&quot;</span>,<span class=\"hljs-string\">&quot;inline&quot;</span>)</span>\n</code></pre>\n<p>在洛谷一些卡常题目的题解中，可以发现更长的编译优化：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(1)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(2)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(3)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;Ofast&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;inline&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fgcse&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fgcse-lm&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fipa-sra&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-ftree-pre&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-ftree-vrp&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fpeephole2&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-ffast-math&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fsched-spec&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;unroll-loops&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-falign-jumps&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-falign-loops&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-falign-labels&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fdevirtualize&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fcaller-saves&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fcrossjumping&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fthread-jumps&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-funroll-loops&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fwhole-program&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-freorder-blocks&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fschedule-insns&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;inline-functions&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-ftree-tail-merge&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fschedule-insns2&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fstrict-aliasing&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fstrict-overflow&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-falign-functions&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fcse-skip-blocks&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fcse-follow-jumps&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fsched-interblock&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fpartial-inlining&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;no-stack-protector&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-freorder-functions&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-findirect-inlining&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fhoist-adjacent-loads&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-frerun-cse-after-loop&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;inline-small-functions&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-finline-small-functions&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-ftree-switch-conversion&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-foptimize-sibling-calls&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fexpensive-optimizations&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-funsafe-loop-optimizations&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;inline-functions-called-once&quot;</span>)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimize(<span class=\"hljs-string\">&quot;-fdelete-null-pointer-checks&quot;</span>)</span>\n</code></pre>\n<p>经测试该优化对程序性能的提升效果中等；后者对程序性能的提升效果和前者相比不超过评测机波动。</p>\n<h3 id=\"低性能运算规避\"><a class=\"markdownIt-Anchor\" href=\"#低性能运算规避\"></a> 低性能运算规避</h3>\n<p>一般来说，乘除运算的开销大于加减运算，加减运算的开销大于位运算。可尽量使用开销低的运算方式，例如：</p>\n<pre class=\"highlight\"><code class=\"c\">y = x * <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">// 改为 y = (x &lt;&lt; 3) + (x &lt;&lt; 1)</span>\ny = x / <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 改为 y = x &gt;&gt; 1</span>\ny = x + <span class=\"hljs-string\">&#x27;0&#x27;</span>; <span class=\"hljs-comment\">// 改为 y = x ^ 48（数字转字符）</span>\ny = x - <span class=\"hljs-string\">&#x27;0&#x27;</span>; <span class=\"hljs-comment\">// 改为 y = x ^ 48（字符转数字）</span>\n</code></pre>\n<p>经测试该优化对程序性能的提升效果中等。</p>\n<p>注：笔者额外测试了 <code>i++</code> 和 <code>++i</code> 的性能差异，在使用寄存器变量的情况下，二者的性能无明显差异。</p>\n<blockquote>\n<p>博客补档时注：虽然一些编译器支持运算强度削弱，但个人认为在编码时进行低性能运算规避仍有必要。这是因为编码时可以掌握变量的值域等信息，以更好的进行运算强度削弱。</p>\n</blockquote>\n<h3 id=\"低性能函数规避\"><a class=\"markdownIt-Anchor\" href=\"#低性能函数规避\"></a> 低性能函数规避</h3>\n<p>在 C 语言中，一些库函数可能包含参数检验等的操作，性能开销较大。可尽量避免使用这些函数，重新实现相应功能。这部分函数主要是字符处理函数，在 <code>ctype.h</code> 中定义（<code>string.h</code> 里面的函数也慢，但慢的没有 <code>ctype.h</code> 里面的函数慢的那么夸张）：</p>\n<pre class=\"highlight\"><code class=\"c\">y = <span class=\"hljs-built_in\">tolower</span>(x); <span class=\"hljs-comment\">// 改为 y = x | 32</span>\ny = <span class=\"hljs-built_in\">isdigit</span>(x); <span class=\"hljs-comment\">// 改为 &#x27;0&#x27; &lt;= x &amp;&amp; x &lt;= &#x27;9&#x27;</span>\ny = <span class=\"hljs-built_in\">isalpha</span>(x); <span class=\"hljs-comment\">// 改为 &#x27;a&#x27; &lt;= x &amp;&amp; x &lt;= &#x27;z&#x27; || &#x27;A&#x27; &lt;= x &amp;&amp; x &lt;= &#x27;Z&#x27;</span>\n</code></pre>\n<p>此外，<code>stdlib.h</code> 中涉及内存的函数和 <code>stdio.h</code> 中设计格式化输入输出的函数也存在性能问题：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>, &amp;c); <span class=\"hljs-comment\">// 改为 c = getchar()</span>\n<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>, c); <span class=\"hljs-comment\">// 改为 putchar(c)</span>\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\">ptr = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// 一次性开出所有空间（内存池），手动维护内存池</span>\n<span class=\"hljs-built_in\">free</span>(ptr); <span class=\"hljs-comment\">// 删了，人生苦短，不是 service 让操作系统帮你回收空间岂不美哉（关文件同理）</span>\n</code></pre>\n<p>经测试该优化对程序性能的提升效果显著。</p>\n<h3 id=\"函数调用优化\"><a class=\"markdownIt-Anchor\" href=\"#函数调用优化\"></a> 函数调用优化</h3>\n<p>由于函数调用存在开销，对于非递归函数可以将其内联以提升性能；对于递归函数，可以将其改为非递归实现以提高性能，例如：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">func</span><span class=\"hljs-params\">()</span> &#123;\n    <span class=\"hljs-comment\">// do something</span>\n&#125;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;\n    <span class=\"hljs-comment\">// do init</span>\n    func();\n    <span class=\"hljs-comment\">// do finalize</span>\n&#125;\n</code></pre>\n<p>可调整为：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;\n    <span class=\"hljs-comment\">// do init</span>\n    <span class=\"hljs-comment\">// do something</span>\n    <span class=\"hljs-comment\">// do finalize</span>\n&#125;\n</code></pre>\n<p>经测试该优化对程序性能的提升不超过评测机波动。</p>\n<blockquote>\n<p>博客补档时注：函数内联后会影响编译器的数据流分析，进而影响启发式寄存器分配，实际上可能造成程序性能下降（尤其对于未采用 SSA IR 的情况）。一些情况下，编译器也会将递归优化为循环（尾递归）。</p>\n</blockquote>\n<h3 id=\"变量重复使用\"><a class=\"markdownIt-Anchor\" href=\"#变量重复使用\"></a> 变量重复使用</h3>\n<p>同一个变量在不同场景下重复使用，例如：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;\n    <span class=\"hljs-comment\">// do something</span>\n&#125;\n<span class=\"hljs-comment\">// do something</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;\n    <span class=\"hljs-comment\">// do something</span>\n&#125;\n</code></pre>\n<p>可调整为：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">int</span> i;\n<span class=\"hljs-comment\">// do something</span>\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;\n    <span class=\"hljs-comment\">// do something</span>\n&#125;\n<span class=\"hljs-comment\">// do something</span>\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;\n    <span class=\"hljs-comment\">// do something</span>\n&#125;\n</code></pre>\n<p>经测试该优化对程序性能的提升不超过评测机波动。</p>\n<blockquote>\n<p>博客补档时注：变量重复使用会影响编译器的数据流分析，进而影响启发式寄存器分配，实际上可能造成程序性能下降（尤其对于未采用 SSA IR 的情况）。变量都在堆上或者都在栈上一般不会有 Cache 命中问题。</p>\n</blockquote>\n<h3 id=\"手动循环展开\"><a class=\"markdownIt-Anchor\" href=\"#手动循环展开\"></a> 手动循环展开</h3>\n<p>将循环手动展开，以减少用于控制的跳转指令，例如：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) &#123;\n    func(i);\n&#125;\n</code></pre>\n<p>可调整为：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i += <span class=\"hljs-number\">10</span>) &#123;\n    func(i);\n    func(i + <span class=\"hljs-number\">1</span>);\n    func(i + <span class=\"hljs-number\">2</span>);\n    func(i + <span class=\"hljs-number\">3</span>);\n    func(i + <span class=\"hljs-number\">4</span>);\n    func(i + <span class=\"hljs-number\">5</span>);\n    func(i + <span class=\"hljs-number\">6</span>);\n    func(i + <span class=\"hljs-number\">7</span>);\n    func(i + <span class=\"hljs-number\">8</span>);\n    func(i + <span class=\"hljs-number\">9</span>);\n&#125;\n</code></pre>\n<p>经测试该优化对程序性能的提升不超过评测机波动。</p>\n<blockquote>\n<p>博客补档时注：一般编译器（开了比较高级的编译优化之后）会帮你做这个优化。</p>\n</blockquote>\n<h3 id=\"使用寄存器变量\"><a class=\"markdownIt-Anchor\" href=\"#使用寄存器变量\"></a> 使用寄存器变量</h3>\n<p>将高频使用的变量（如循环变量）声明为寄存器变量，例如：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;\n    <span class=\"hljs-comment\">// do something</span>\n&#125;\n</code></pre>\n<p>可调整为：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">register</span> <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;\n    <span class=\"hljs-comment\">// do something</span>\n&#125;\n</code></pre>\n<p>经测试该优化对程序性能的提升不超过评测机波动。</p>\n<blockquote>\n<p>博客补档时注：一般编译器（除非把优化全关了）会帮你做这个优化。</p>\n</blockquote>\n<h3 id=\"字典树预构建\"><a class=\"markdownIt-Anchor\" href=\"#字典树预构建\"></a> 字典树预构建</h3>\n<p>在字典树中插入单词的参考实现如下，一个想法是预先将高频出现的单词放入字典树（在代码里面写死，在两篇文章中的出现次数为 0），从而减少第 6 行被执行的次数：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">ins</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> flag)</span> &#123;\n    <span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> son, i = <span class=\"hljs-number\">0</span>; newword[i]; i++) &#123;\n        son = newword[i] - <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n        <span class=\"hljs-keyword\">if</span> (!pol[index].s[son]) &#123;\n            pol[index].s[son] = ++top;\n        &#125;\n        index = pol[index].s[son];\n    &#125;\n    pol[index].con1 += !flag;\n    pol[index].con2 += flag;\n&#125;\n</code></pre>\n<p>经测试该优化对程序性能的提升不超过评测机波动。</p>\n<blockquote>\n<p>博客补档时注：可能加载 ELF 的时间被算进去了，所以预先初始化一样有开销。</p>\n</blockquote>\n<h3 id=\"hash-函数选择\"><a class=\"markdownIt-Anchor\" href=\"#hash-函数选择\"></a> Hash 函数选择</h3>\n<p>笔者尝试过以下 Hash 函数：</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">my_hash_alpha</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> &#123;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (*s) &#123;\n        ans = ans * <span class=\"hljs-number\">26</span> - <span class=\"hljs-string\">&#x27;a&#x27;</span> + *s++;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> ans % MOD;\n&#125;\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">my_hash_beta</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> &#123;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (*s) &#123;\n        ans = (ans &lt;&lt; <span class=\"hljs-number\">6</span>) - ans + *s++;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> ans % MOD;\n&#125;\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">bkdr_hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> &#123;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (*s) &#123;\n        ans = ans * <span class=\"hljs-number\">13131</span> + *s++;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> ans % MOD;\n&#125;\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sdbm_hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> &#123;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (*s) &#123;\n        ans = ans * <span class=\"hljs-number\">65599</span> + *s++;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> ans % MOD;\n&#125;\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">rs_hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> &#123;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> temp = <span class=\"hljs-number\">63689</span>;\n    <span class=\"hljs-keyword\">while</span> (*s) &#123;\n        ans = ans * temp + *s++;\n        temp *= <span class=\"hljs-number\">378551</span>;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> ans % MOD;\n&#125;\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">ap_hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> &#123;\n    <span class=\"hljs-type\">char</span> ch;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; (ch = *s++); i++) &#123;\n        <span class=\"hljs-keyword\">if</span> (i &amp; <span class=\"hljs-number\">1</span>) &#123;\n            ans ^= ~((ans &lt;&lt; <span class=\"hljs-number\">11</span>) ^ ch ^ (ans &gt;&gt; <span class=\"hljs-number\">5</span>));\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            ans ^= (ans &lt;&lt; <span class=\"hljs-number\">7</span>) ^ ch ^ (ans &gt;&gt; <span class=\"hljs-number\">3</span>);\n        &#125;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> ans % MOD;\n&#125;\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">js_hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> &#123;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">1315423911</span>;\n    <span class=\"hljs-keyword\">while</span> (*s) &#123;\n        ans ^= (ans &lt;&lt; <span class=\"hljs-number\">5</span>) + (ans &gt;&gt; <span class=\"hljs-number\">2</span>) + *s++;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> ans % MOD;\n&#125;\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">dek_hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> &#123;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">1315423911</span>;\n    <span class=\"hljs-keyword\">while</span> (*s) &#123;\n        ans = (ans &lt;&lt; <span class=\"hljs-number\">5</span>) ^ (ans &gt;&gt; <span class=\"hljs-number\">27</span>) ^ *s++;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> ans % MOD;\n&#125;\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fnv_hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> &#123;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">2166136261</span>;\n    <span class=\"hljs-keyword\">while</span> (*s) &#123;\n        ans = (ans * <span class=\"hljs-number\">16777619</span>) ^ *s++;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> ans % MOD;\n&#125;\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">djb_hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> &#123;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">5381</span>;\n    <span class=\"hljs-keyword\">while</span> (*s) &#123;\n        ans += (ans &lt;&lt; <span class=\"hljs-number\">5</span>) + *s++;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> ans % MOD;\n&#125;\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pjw_hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> &#123;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> temp;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (*s) &#123;\n        ans = (ans &lt;&lt; <span class=\"hljs-number\">4</span>) + *s++;\n        <span class=\"hljs-keyword\">if</span> ((temp = ans &amp; <span class=\"hljs-number\">805306368</span>)) &#123;\n            ans ^= (temp &gt;&gt; <span class=\"hljs-number\">24</span>), ans &amp;= ~<span class=\"hljs-number\">805306368</span>;\n        &#125;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> ans % MOD;\n&#125;\n</code></pre>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">elf_hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span> &#123;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> temp;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (*s) &#123;\n        ans = (ans &lt;&lt; <span class=\"hljs-number\">4</span>) + *s++;\n        <span class=\"hljs-keyword\">if</span> ((temp = ans &amp; <span class=\"hljs-number\">805306368</span>)) &#123;\n            ans ^= (temp &gt;&gt; <span class=\"hljs-number\">24</span>), ans &amp;= ~temp;\n        &#125;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> ans % MOD;\n&#125;\n</code></pre>\n<p>在 MOD 选择方面，笔者尝试过：</p>\n<ul>\n<li>2 的整次幂：17、18、19、20、21、22、23、24、25、26、27。</li>\n<li>大质数：100003、1000003、10000019、100000007。</li>\n</ul>\n<p>测试结果如下：</p>\n<ul>\n<li>正向读取单词，采用 BKDR Hash，同时采用 <code>ans &amp; 524287</code> 时拥有最佳运行效率。</li>\n<li>反向读取单词，采用 SDBM Hash，同时采用 <code>ans &amp; 524287</code> 时拥有最佳运行效率。</li>\n</ul>\n<h2 id=\"总结与补遗\"><a class=\"markdownIt-Anchor\" href=\"#总结与补遗\"></a> 总结与补遗</h2>\n<p>针对评测机的吐槽：</p>\n<ul>\n<li>评测机波动十分离谱，需要多次提交找最快，课程组说会单独重测，真实性未知。</li>\n<li>评测机疑似可调用 Python、疑似可联网，偷鸡不无可能。</li>\n<li>由于评测机没有 CD 且会给出 CPU 时间与运行时间，可以根据数据特征进行 Sleep，再根据 CPU 时间和运行时间的差异（也就是 Sleep 的时间）判断数据特征（<s>偷数据</s>）。</li>\n</ul>\n<p>针对题目的吐槽：</p>\n<ul>\n<li>连续好几年都是字典停词外加一两篇文章统计分析了，没啥新意。</li>\n<li>表面上是数据结构，实际上是卡常技巧（而且相当一部分卡常不那么“工程”），卷到最后都该内联汇编/并行加速了。</li>\n<li>机器硬件配置不公布，编译器版本与编译参数不公布，逼同学们去搞各种指纹识别。</li>\n<li>评测机波动大的情况下排名赋分稍显离谱，比较好的方式是划若干时间线给分，或者比实际执行的汇编指令数等。</li>\n</ul>\n","length":"2.9k","time":"13min","categories":["Buaa","DSP"],"tags":["Algorithm","C"]}